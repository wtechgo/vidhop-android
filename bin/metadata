#!/bin/bash

function metadata_help() {
  echo " Title: metadata"
  echo " Description: Edit the metadata of downloads."
  echo " Commands:"
  echo "    setdescription <your_description> => Set a description in the metadata JSON file."
  echo "    setsummary <your_summary>         => Set a summary in the metadata JSON file."
  echo "    setcategories <your_categories>   => Set categories in the metadata JSON file."
  echo "    settopics <your_topics>           => Set topics in the metadata JSON file."
  echo "    setspeakers <your_speakers>       => Set speakers in the metadata JSON file."
  echo "    setcreators <your_creators>       => Set creators in the metadata JSON file."
  echo "    rmdescription <your_description>  => Remove a description in the metadata JSON file."
  echo "    rmsummary <your_summary>          => Remove a summary in the metadata JSON file."
  echo "    rmcategories <your_categories>    => Remove categories in the metadata JSON file."
  echo "    rmtopics <your_topics>            => Remove topics in the metadata JSON file."
  echo "    rmspeakers <your_speakers>        => Remove speakers in the metadata JSON file."
  echo "    rmcreators <your_creators>        => Remove creators in the metadata JSON file."
}

function set_metadata_field_json_obj() {
  key="$1" && value="$2"
  json=$(jq --arg 'value' "$value" '."'"$key"'" = $value' <<<"$json")
}

# Sets JSON field with 'key' to 'value' and writes to $meta_file if available.
# Usage: command "key" "value" ---------------------> uses "$json"
#        command "key" "value" "partial_filename" --> seeks metadata file, stores path, in $metadata and loads it "$json"
function set_metadata_field() {
  [ "$#" = 0 ] || [ "$#" = 1 ] && echo "no metadata field given to set" && return
  [ "$#" = 2 ] && key="$1" && value="$2" && metadata="$json" # Two arguments (key & value), implies to use $json as metadata.
  [ "$#" = 3 ] && key="$1" && value="$2" && partial_filename="$3" && # three arguments implies we need to find a metadata FILE.
    meta_file="$(find_one_meta "$partial_filename")" &&
    result_find_one_meta="$?" &&
    metadata=$(jq . "$meta_file")
  [ "$result_find_one_meta" = 1 ] && echo "found no metadata for '$partial_filename'" && return
  [ "$result_find_one_meta" = 2 ] && echo "found more than 1 file, specify '$partial_filename' further" && return 1

  [ -z "$metadata" ] && echo "no metadata to work with" && return 1
  json=$(jq --arg 'value' "$value" '."'"$key"'" = $value' <<<"$metadata")

  [ -f "$meta_file" ] && jq . <<<"$json" >"$meta_file" && return
  echo "no metadata file to write to"
}

function setdescription() {
  set_metadata_field 'vh_description' "$@" || return
  echo "'vh_description' was set to '$1' $([ -f "$meta_file" ] && echo -e "in metadata file:\n $meta_file")"
}

function setsummary() {
  set_metadata_field 'vh_summary' "$@" || return
  echo "'vh_summary' was set to '$1' $([ -f "$meta_file" ] && echo -e "in metadata file:\n $meta_file")"
}

function setcategories() {
  set_metadata_field 'vh_categories' "$@" || return
  echo "'vh_categories' was set to '$1' $([ -f "$meta_file" ] && echo -e "in metadata file:\n $meta_file")"
}

function settopics() {
  set_metadata_field 'vh_topics' "$@" || return
  echo "'vh_topics' was set to '$1' $([ -f "$meta_file" ] && echo -e "in metadata file:\n $meta_file")"
}

function setspeakers() {
  set_metadata_field 'vh_speakers' "$@" || return
  echo "'vh_speakers' was set to '$1' $([ -f "$meta_file" ] && echo -e "in metadata file:\n $meta_file")"
}

function setcreators() {
  set_metadata_field 'vh_creators' "$@" || return
  echo "'vh_creators' was set to '$1' $([ -f "$meta_file" ] && echo -e "in metadata file:\n $meta_file")"
}

function setcreators() {
  set_metadata_field 'vh_creators' "$@" || return
  echo "'vh_creators' was set to '$1' $([ -f "$meta_file" ] && echo -e "in metadata file:\n $meta_file")"
}

function settimestamp() {
  set_metadata_field "vh_timestamps" "$1" "$2" || return
  echo "'vh_timestamps' was set to '$1' $([ -f "$meta_file" ] && echo -e "in metadata file:\n $meta_file")"
}

function addtimestamp() {
  [ -z "$1" ] && echo -e "usage: addtimestamp <TIMESTAMP> [<PARTIAL_FILENAME>]" &&
    echo "example: addtimestamp '01:11:01 = talking about interesting topic X'" && return
  [ -n "$json" ] && metadata="$json"
  [ -z "$metadata" ] && [ -n "$2" ] && json_file=$(find_one_meta "$2") && metadata=$(jq . "$json_file")
  [ -z "$metadata" ] && echo "no metadata to work with" && return 1

  timestamps=$(jq '.vh_timestamps' <<<"$metadata" | tr -d '"')
  [ "$timestamps" = null ] && settimestamp "$1" && return
  timestamps="${timestamps}, ${1}"  # append new timestamps to old ones

  set_metadata_field "vh_timestamps" "$timestamps" "$2" || return
  echo "'vh_timestamps' was set to '$timestamps' $([ -f "$meta_file" ] && echo -e "in metadata file:\n $meta_file")"
}

function set_downloaded() {
  set_metadata_field_json_obj "vh_downloaded" "$1"
}

function set_downloaded_date() {
  set_metadata_field_json_obj "vh_downloaded_date" "$(date +'%d-%m-%Y_%H:%M:%S')"
}

function set_thumb_file() {
  set_metadata_field "vh_thumb_file" "$1" || return
  echo "'vh_thumb_file' was set to '$1' $([ -f "$meta_file" ] && echo -e "in metadata file:\n $meta_file")"
}

function rm_metadata_field_json_obj() {
  key="$1"
  [ -z "$key" ] || [ -z "$json" ] && echo "could not remove metadata for key '$key'" && return
  json=$(jq 'del(."'"$key"'")' <<<"$json")
}

function rm_metadata_field() {
  [ "$#" = 0 ] && echo "no metadata field given to remove" && return
  [ "$#" = 1 ] && key="$1" && metadata="$json" # meta_file should be set if $json is set
  [ "$#" = 2 ] && key="$1" && partial_filename="$2" &&
    meta_file="$(find_one_meta "$partial_filename")" &&
    result_find_one_meta="$?" &&
    metadata=$(jq . "$meta_file")
  [ "$result_find_one_meta" = 1 ] && echo "found no metadata for '$partial_filename'" && return 1
  [ "$result_find_one_meta" = 2 ] && echo "found more than 1 file, specify '$partial_filename' further" && return 1

  [ -z "$metadata" ] && echo "no metadata to work with" && return 1
  json=$(jq 'del(."'"$key"'")' <<<"$metadata")

  [ -f "$meta_file" ] && jq . <<<"$json" >"$meta_file" && return
  echo "no metadata file to write to"
}

function rmdescription() {
  rm_metadata_field 'vh_description' "$@" || return
  echo "'vh_description' was removed $([ -f "$meta_file" ] && echo -e "from metadata file:\n$meta_file")"
}

function rmsummary() {
  rm_metadata_field 'vh_summary' "$@" || return
  echo "'vh_summary' was removed $([ -f "$meta_file" ] && echo -e "from metadata file:\n$meta_file")"
}

function rmcategories() {
  rm_metadata_field 'vh_categories' "$@" || return
  echo "'vh_categories' was removed $([ -f "$meta_file" ] && echo -e "from metadata file:\n$meta_file")"
}

function rmtopics() {
  rm_metadata_field 'vh_topics' "$@" || return
  echo "'vh_topics' was removed $([ -f "$meta_file" ] && echo -e "from metadata file:\n$meta_file")"
}

function rmspeakers() {
  rm_metadata_field 'vh_speakers' "$@" || return
  echo "'vh_speakers' was removed $([ -f "$meta_file" ] && echo -e "from metadata file:\n$meta_file")"
}

function rmcreators() {
  rm_metadata_field 'vh_creators' "$@" || return
  echo "'vh_creators' was removed $([ -f "$meta_file" ] && echo -e "from metadata file:\n$meta_file")"
}

function rmtimestamp() {
  rm_metadata_field 'vh_timestamps' "$@" || return
  echo "'vh_timestamps' was removed $([ -f "$meta_file" ] && echo -e "from metadata file:\n$meta_file")"
}

function rmdownloaded() {
  rm_metadata_field 'vh_downloaded' || return
  echo "'vh_downloaded' was removed $([ -f "$meta_file" ] && echo -e "from metadata file:\n$meta_file")"
}

function rmdownloaded_date() {
  rm_metadata_field 'vh_downloaded_date' || return
  echo "'vh_downloaded_date' was removed $([ -f "$meta_file" ] && echo -e "from metadata file:\n$meta_file")"
}

function rm_media_file() {
  rm_metadata_field 'vh_media_file' || return
  echo "'vh_downloaded' was removed $([ -f "$meta_file" ] && echo -e "from metadata file:\n$meta_file")"
}

function rm_meta_file() {
  rm_metadata_field 'vh_meta_file' || return
  echo "'vh_meta_file' was removed $([ -f "$meta_file" ] && echo -e "from metadata file:\n$meta_file")"
}

function rm_thumb_file() {
  rm_metadata_field 'vh_thumb_file' || return
  echo "'vh_thumb_file' was removed $([ -f "$meta_file" ] && echo -e "from metadata file:\n$meta_file")"
}
