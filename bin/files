#!/bin/bash

function files_help() {
  echo " Title: files"
  echo " Description: Manage VidHop files."
  echo " Commands:"
  echo "    play                            => play last downloaded video in default media player (MPV recommended)"
  echo "    play <PARTIAL_FILENAME>         => play video with filename that matches <PARTIAL_FILENAME> in default media player (MPV recommended)"
  echo "    specs                           => shows technical video information like codecs, resolution...of last downloaded video"
  echo "    specs <URL>                     => shows technical video information like codecs, resolution...of a video at <URL>"
  echo "    specs <PARTIAL_FILENAME>        => shows technical video information like codecs, resolution...of a video who's filename matches <PARTIAL_FILENAME>"
  echo "    rmchan <PARTIAL_CHANNEL_NAME>   => remove all files of a channel that matches <PARTIAL_CHANNEL_NAME>"
  echo "    rmlast                          => remove all files of last downloaded video"
  echo "    renlast <NEW_FILENAME>          => rename all files of last downloaded video to <NEW_FILENAME>"
  echo "    rmvid <PARTIAL_FILENAME>        => remove all files of a video who's name matches <PARTIAL_FILENAME>"
  echo "    renvid <PARTIAL_OLD_FILENAME> <NEW_FILENAME>  => rename all files of a video that matches <PARTIAL_OLD_FILENAME>"
  return 0
}

function play() {
  [ -z "$media_file" ] && [ -z "$1" ] && echo "no media file available and no user input received" && return
  [ -f "$1" ] && media_file="$1" || search_text="$1"

  if [ -n "$search_text" ]; then
    files=$(find "$vidhop_dir" -iname "*$1*mp4")
    echo "$files"
    count=$(wc -l <<<"$files")
    [ "$files" = "" ] && count=0

    [ "$count" -eq 0 ] && echo "found nothing for '$search_text'" && unset files && return
    [ "$count" -gt 1 ] &&
      echo -e "play requires 1 file but found $count $files\nyou can specifiy your search term further" &&
      unset files && return
    media_file="$files" && unset files
  fi
  ! [ -f "$media_file" ] && echo "cannot play file '$media_file'" && return

  [[ "$media_file" == *.mp4 ]] && "$video_app" "$media_file" && return
  [[ "$media_file" == *.mp3 ]] && "$audio_app" "$media_file" && return
  [[ "$media_file" == *.webp ]] && "$picture_app_alt" "$media_file" && return
  [[ "$media_file" == *.jpg ]] || [[ "$media_file" == *.jpg ]] && "$picture_app" "$media_file" && return
}

function path_newfile() {
  old_file="$1"
  new_name="$2"
  dir_name=$(dirname "$old_file")
  ext=$(get_extension "$old_file")
  echo "$dir_name/$new_name.$ext"
}

function rename_file() {
  old_file="$1"
  new_name="$2"
  new_file=$(path_newfile "$old_file" "$new_name")
  mv "$old_file" "$new_file"
  echo -e "> Renamed:\n$old_file\nTo:\n$new_file"
}

# Rename a video and its metadata.
function renvid() {
  cd "$vids_dir" || return 1
  [ -z "$1" ] || [ -z "$2" ] && echo -e "usage: renvid <OLD_NAME> <NEW_NAME>\n
    you are in the videos dir now (for autocomplete)\n
    OLD_NAME input works with and without file extensions" && return 0

  old_name="$1"
  new_name="$2"

  results=$(find "$vidhop_dir" -iname "*$old_name*")
  [ -z "$results" ] && echo found no matches && return
  echo "$results"

  echo -n "rename these files? Y/n: " && read -r answer
  answer=$(echo "$answer" | tr '[:upper:]' '[:lower:]')
  [ "$answer" = "n" ] && return

  # rename history entry
  find "$vidhop_dir" -iname "*$old_name*" | while read -r old_name; do rename_file "$old_name" "$new_name"; done
  json_file=$(find "$vidhop_dir" -iname "$new_name.json")
  ! [ -f "$json_file" ] && echo "could not locate metadata json file at $json_file" && return
  json=$(jq . "$json_file")
  name=$(basename "$json_file" | sed "s/.json//g")
  if [ -f "$titles_file" ]; then
    head -n -1 "$titles_file" >"$log_dir/titles.tmp.log"
    echo "$name" >>"$log_dir/titles.tmp.log"
    mv "$log_dir/titles.tmp.log" "$titles_file"
  fi
}

function renlast() {
  [ -z "$1" ] && echo "usage: renlast <NEW_NAME>" && return
  [ "$(has_vhistory_vars)" = false ] && echo "no files in memory to rename" && return
  new_name="$1" #  new_name=$(sanitize_filename "$1")

  echo "> Rename:"
  [ -f "$media_file" ] && echo "$media_file"
  [ -f "$meta_file" ] && echo "$meta_file"
  [ -f "$thumb_file" ] && echo "$thumb_file"
  [ -f "$avatar_file" ] && echo "$avatar_file"
  echo "> To:"
  [ -f "$media_file" ] && path_newfile "$media_file" "$new_name"
  [ -f "$meta_file" ] && path_newfile "$meta_file" "$new_name"
  [ -f "$thumb_file" ] && path_newfile "$thumb_file" "$new_name"
  [ -f "$avatar_file" ] && path_newfile "$avatar_file" "$new_name"

  echo -n "Rename these files? Y/n: " && read -r answer
  answer=$(echo "$answer" | tr '[:upper:]' '[:lower:]')
  [ "$answer" = "n" ] && return

  [ -f "$media_file" ] && rename_file "$media_file" "$new_name" && media_file=$(path_newfile "$media_file" "$new_name")
  [ -f "$meta_file" ] && rename_file "$meta_file" "$new_name" && meta_file=$(path_newfile "$meta_file" "$new_name")
  [ -f "$thumb_file" ] && rename_file "$thumb_file" "$new_name" && thumb_file=$(path_newfile "$thumb_file" "$new_name")
  [ -f "$avatar_file" ] && rename_file "$avatar_file" "$new_name" && avatar_file=$(path_newfile "$avatar_file" "$new_name")
  [ -f "$title" ] &&
    echo "> Renamed to:" &&
    echo "$name" >>"$titles_file"
}

function rmvid() {
  [ -z "$1" ] && echo "usage: rmvid <PARTIAL_VIDEO_NAME>" && return 1
  name="$1"

  results=$(find "$vidhop_dir" -iname "*$name*")
  [ -z "$results" ] && echo found no matches && return
  echo "$results"

  echo -n "delete these files permanently? Y/n: " && read -r answer
  answer=$(echo "$answer" | tr '[:upper:]' '[:lower:]')
  [ "$answer" = "n" ] || [ "$answer" = "N" ] && return

  find "$vidhop_dir" -iname "*$name*" -exec rm -rf {} \;
  echo "deleted '$name.mp4|.json|.jpg.|.png|.webp'"

  head -n -1 "$titles_file" >"$log_dir/titles.tmp.log"
  mv "$log_dir/titles.tmp.log" "$titles_file"
}

function rmlast() {
  rmvid "$(lasttitle)"
}

function find_archive_file_from_channel_name() {
  name="$1"
  found_json=$(find "$channels_meta_dir" -type f -iname "*$name*.json")
  [ -z "$found_json" ] && return 0
  [ "$(wc -l <<<"$found_json")" -gt 1 ] && echo -e "found more than one file:\n$results" && return 1

  channel_url=$(channel_url_from_json_file "$found_json")
  archive_filename=$(url_to_filename "$channel_url")
  find "$downloaded_dir" -type f -iname "$archive_filename"
}

function find_archive_file_from_url() {
  url="$1"
  archive_file="$downloaded_dir/$(url_to_filename "$url")"
  [ -f "$archive_file" ] && echo "$archive_file" && return
  logInfo "find_archive_file_from_url created an invalid archive file path: $archive_file"
}

function rmarchiveforurl() {
  url="$1"
  [ "$(is_url "$url")" = "false" ] && echo "not a valid url" && return 1

  archive_file=$(find_archive_file_from_url "$url")
  [ -f "$archive_file" ] && rm "$archive_file" && echo "removed $archive_file" && return
  echo "could not remove as file '$archive_file' does not exist"
}

function rmchan() {
  [ -z "$1" ] && echo "usage: rmchan <PARTIAL_CHANNEL_NAME>" && return 1
  unset answer found_channel_dir found_downloaded_file

  name="$1"
  [ -n "$2" ] && answer="$2"
  found_channel_dir=$(find "$channels_dir" -type d -iname "*$name*")
  found_channel_meta_dir=$(find "$channels_meta_dir" -type d -iname "*$name*")
  found_downloaded_file=$(find_archive_file_from_channel_name "$name" || echo "")

  logInfo "downloaded archive file: $found_downloaded_file"
  [ ! -d "$found_channel_dir" ] && [ ! -d "$found_channel_meta_dir" ] && [ ! -f "$found_downloaded_file" ] && echo found no matches && return
  echo "found files:"
  [ -d "$found_channel_dir" ] && echo -e "$found_channel_dir"
  [ -d "$found_channel_meta_dir" ] && echo -e "$found_channel_meta_dir"
  [ -f "$found_downloaded_file" ] && echo -e "$found_downloaded_file"

  if [ -z "$answer" ]; then
    echo "caution: rmchan will remove all media and metadata files of '$name' for all platforms"
    echo -n "delete channel permanently? Y/n: " && read -r answer
    answer=$(echo "$answer" | tr '[:upper:]' '[:lower:]')
    [ "$answer" = "n" ] && return
  fi

  # remove files
  [ -d "$found_channel_dir" ] && rm -rf "$found_channel_dir" && echo "deleted channel media directory: $found_channel_dir"
  [ -d "$found_channel_meta_dir" ] && rm -rf "$found_channel_meta_dir" && echo "deleted channel metadata directory: $found_channel_meta_dir"
  [ -f "$found_downloaded_file" ] && rm "$found_downloaded_file" && echo "deleted downloaded archive file: $found_downloaded_file"
}

function rmartist() {
  [ -z "$1" ] && echo "usage: rmartist <PARTIAL_ARTIST_NAME>" && return 1
  unset answer found_artist_dir found_downloaded_file

  name="$1"
  [ -n "$2" ] && answer="$2"
  found_artist_dir=$(find "$music_dir" -maxdepth 1 -type d -iname "*$name*")
  found_artist_meta_dir=$(find "$music_meta_dir" -maxdepth 1 -type d -iname "*$name*")
  found_downloaded_file=$(find_archive_file_from_channel_name "$name" || echo "")

  logInfo "downloaded archive file: $found_downloaded_file"
  [ ! -d "$found_artist_dir" ] && [ ! -d "$found_artist_meta_dir" ] && [ ! -f "$found_downloaded_file" ] && echo found no matches && return
  echo "found files:"
  [ -d "$found_artist_dir" ] && echo -e "$found_artist_dir"
  [ -d "$found_artist_meta_dir" ] && echo -e "$found_artist_meta_dir"
  [ -f "$found_downloaded_file" ] && echo -e "$found_downloaded_file"

  if [ -z "$answer" ]; then
    echo "caution: rmchan will remove all media and metadata files of '$name' for all platforms"
    echo -n "delete channel permanently? Y/n: " && read -r answer
    answer=$(echo "$answer" | tr '[:upper:]' '[:lower:]')
    [ "$answer" = "n" ] && return
  fi

  # remove files
  [ -d "$found_artist_dir" ] && rm -rf "$found_artist_dir" && echo "deleted channel media directory: $found_artist_dir"
  [ -d "$found_artist_meta_dir" ] && rm -rf "$found_artist_meta_dir" && echo "deleted channel metadata directory: $found_artist_meta_dir"
  [ -f "$found_downloaded_file" ] && rm "$found_downloaded_file" && echo "deleted downloaded archive file: $found_downloaded_file"
}

function rmarchive() {
  [ -z "$1" ] && echo 'rmarchive $URL' && return
  url="$1"
  [[ "$url" != http* ]] && echo "invalid url '$url'" && return

  archive_to_be_removed="$downloaded_dir/$(url_to_filename "$url")"
  ! [ -f "$archive_to_be_removed" ] &&
    echo -e "tried to remove '$archive_to_be_removed' but file doesn't exist\nno downloaded archive file for url '$url'" &&
    return
  rm "$archive_to_be_removed" && echo "deleted $archive_to_be_removed"
}

function set_metadata_field_json_obj() {
  key="$1" && value="$2"
  json=$(jq --arg 'value' "$value" '."'"$key"'" = $value' <<<"$json")
}

# Sets JSON field with 'key' to 'value' and writes to $meta_file if available.
# Usage: command "key" "value" ---------------------> uses "$json"
#        command "key" "value" "partial_filename" --> seeks metadata file, stores path, in $metadata and loads it "$json"
function set_metadata_field() {
  [ "$#" = 0 ] || [ "$#" = 1 ] && echo "no metadata field given to remove" && return
  [ "$#" = 2 ] && key="$1" && value="$2" && metadata="$json" # meta_file should be set if $json is set
  [ "$#" = 3 ] && key="$1" && value="$2" && partial_filename="$3" &&
    meta_file="$(find_one_meta "$partial_filename")" &&
    result_find_one_meta="$?" &&
    metadata=$(jq . "$meta_file")
  [ "$result_find_one_meta" = 1 ] && echo "found no metadata for '$partial_filename'" && return
  [ "$result_find_one_meta" = 2 ] && echo "found more than 1 file, specify '$partial_filename' further" && return

  [ -z "$metadata" ] && echo "no metadata to work with" && return
  json=$(jq --arg 'value' "$value" '."'"$key"'" = $value' <<<"$metadata")

  [ -f "$meta_file" ] && jq . <<<"$json" >"$meta_file" && return
  echo "no metadata file to write to"
}

function setdescription() {
  set_metadata_field 'vh_description' "$@"
  echo "'vh_description' was set to '$1' $([ -f "$meta_file" ] && echo -e "in metadata file:\n $meta_file")"
}

function setsummary() {
  set_metadata_field 'vh_summary' "$@"
  echo "'vh_summary' was set to '$1' $([ -f "$meta_file" ] && echo -e "in metadata file:\n $meta_file")"
}

function setcategories() {
  set_metadata_field 'vh_categories' "$@"
  echo "'vh_categories' was set to '$1' $([ -f "$meta_file" ] && echo -e "in metadata file:\n $meta_file")"
}

function settopics() {
  set_metadata_field 'vh_topics' "$@"
  echo "'vh_topics' was set to '$1' $([ -f "$meta_file" ] && echo -e "in metadata file:\n $meta_file")"
}

function setspeakers() {
  set_metadata_field 'vh_speakers' "$@"
  echo "'vh_speakers' was set to '$1' $([ -f "$meta_file" ] && echo -e "in metadata file:\n $meta_file")"
}

function setcreators() {
  set_metadata_field 'vh_creators' "$@"
  echo "'vh_creators' was set to '$1' $([ -f "$meta_file" ] && echo -e "in metadata file:\n $meta_file")"
}

function setcreators() {
  set_metadata_field 'vh_creators' "$@"
  echo "'vh_creators' was set to '$1' $([ -f "$meta_file" ] && echo -e "in metadata file:\n $meta_file")"
}

function set_downloaded() {
  set_metadata_field_json_obj "vh_downloaded" "$1"
}

function set_downloaded_date() {
  set_metadata_field_json_obj "vh_downloaded_date" "$(date +'%d-%m-%Y_%H:%M:%S')"
}

function set_thumb_file() {
  set_metadata_field "vh_thumb_file" "$1"
}

function rm_metadata_field_json_obj() {
  key="$1"
  [ -z "$key" ] || [ -z "$json" ] && echo "could not remove metadata for key '$key'" && return
  json=$(jq 'del(."'"$key"'")' <<<"$json")
}

function rm_metadata_field() {
  [ "$#" = 0 ] && echo "no metadata field given to remove" && return
  [ "$#" = 1 ] && key="$1" && metadata="$json" # meta_file should be set if $json is set
  [ "$#" = 2 ] && key="$1" && partial_filename="$2" &&
    meta_file="$(find_one_meta "$partial_filename")" &&
    result_find_one_meta="$?" &&
    metadata=$(jq . "$meta_file")
  [ "$result_find_one_meta" = 1 ] && echo "found no metadata for '$partial_filename'" && return
  [ "$result_find_one_meta" = 2 ] && echo "found more than 1 file, specify '$partial_filename' further" && return

  [ -z "$metadata" ] && echo "no metadata to work with" && return
  json=$(jq 'del(."'"$key"'")' <<<"$metadata")

  [ -f "$meta_file" ] && jq . <<<"$json" >"$meta_file" && return
  echo "no metadata file to write to"
}

function rmdescription() {
  rm_metadata_field 'vh_description' "$@"
  echo "'vh_description' was removed $([ -f "$meta_file" ] && echo -e "from metadata file:\n$meta_file")"
}

function rmsummary() {
  rm_metadata_field 'vh_summary' "$@"
  echo "'vh_summary' was removed $([ -f "$meta_file" ] && echo -e "from metadata file:\n$meta_file")"
}

function rmcategories() {
  rm_metadata_field 'vh_categories' "$@"
  echo "'vh_categories' was removed $([ -f "$meta_file" ] && echo -e "from metadata file:\n$meta_file")"
}

function rmtopics() {
  rm_metadata_field 'vh_topics' "$@"
  echo "'vh_topics' was removed $([ -f "$meta_file" ] && echo -e "from metadata file:\n$meta_file")"
}

function rmspeakers() {
  rm_metadata_field 'vh_speakers' "$@"
  echo "'vh_speakers' was removed $([ -f "$meta_file" ] && echo -e "from metadata file:\n$meta_file")"
}

function rmcreators() {
  rm_metadata_field 'vh_creators' "$@"
  echo "'vh_creators' was removed $([ -f "$meta_file" ] && echo -e "from metadata file:\n$meta_file")"
}

function rmdownloaded() {
  rm_metadata_field 'vh_downloaded'
  echo "'vh_downloaded' was removed $([ -f "$meta_file" ] && echo -e "from metadata file:\n$meta_file")"
}

function rmdownloaded_date() {
  rm_metadata_field "vh_downloaded_date"
  echo "'vh_downloaded_date' was removed $([ -f "$meta_file" ] && echo -e "from metadata file:\n$meta_file")"
}

function rm_media_file() {
  rm_metadata_field "vh_media_file"
}

function rm_meta_file() {
  rm_metadata_field "vh_meta_file"
}

function rm_thumb_file() {
  rm_metadata_field "vh_thumb_file"
}

function usage_specs() {
  echo -e "usage:\n  specs uses the media file of the last dlv execution\n  specs <URL>\n  specs <FILE>" && return
}

function specs() {
  [ "$1" = "-h" ] || [ "$1" = "--help" ] && usage_specs
  if [ "$(is_url "$1")" = true ]; then
    yt-dlp -F --force-ipv4 "$1"
    yt-dlp -J --force-ipv4 "$1" | jq '{
      title: .title,
      original_url: .webpage_url,
      duration_string: .duration_string,
      resolution: .resolution,
      format: .format,
      dynamic_range: .dynamic_range,
      vcodec: .vcodec,
      acodec: .acodec,
      vbr: .vbr,
      abr: .abr,
    }'
  elif [ -f "$1" ]; then
    mediainfo "$1"
  else
    [ -z "$media_file" ] && echo "no media file from previous dlv execution to display" && usage_specs && return
    mediainfo "$media_file"
  fi
}

function mediafile() {
  echo "$media_file"
}

function metadata() {
  if [ -n "$1" ]; then
    [ -f "$1" ] && jq . "$1" && return
    found_meta_file="$(find_one_meta "$1")"
    [ -f "$found_meta_file" ] && jq . "$found_meta_file" && return
  else
    [ -f "$meta_file" ] && jq . "$meta_file" && return
    [ -f "$json_file" ] && jq . "$meta_file" && return
  fi
  echo "no metadata to show"
}

function treevidhopbefore() {
  ! [ -x "$(command -v tree)" ] && echo "'tree' command not installed" && return
  tree "$vidhop_dir" >"$log_dir/tree_vidhop_before"
}

function treevidhopafter() {
  ! [ -x "$(command -v tree)" ] && echo "'tree' command not installed" && return
  tree "$vidhop_dir" >"$log_dir/tree_vidhop_after"
}
