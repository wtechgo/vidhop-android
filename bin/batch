#!/bin/bash

function batch_help() {
  echo " Title: batch"
  echo " Description: Do work in bulk aka batch processing."
  echo " Commands:"
  echo "    dlalist [<LIST_FILE_PATH>]     => download all URLs in list file at /VidHop/import/list/dla.list"
  echo "    dlaclist [<LIST_FILE_PATH>]    => download all URLs in list file at /VidHop/import/list/dlac.list"
  echo "    dlacilist [<LIST_FILE_PATH>]   => download all URLs in list file at /VidHop/import/list/dlaci.list"
  echo "    dlalbumlist [<LIST_FILE_PATH>] => download all URLs in list file at /VidHop/import/list/dlalbum.list"
  echo "    dlapllist [<LIST_FILE_PATH>]   => download all URLs in list file at /VidHop/import/list/dlapl.list"
  echo "    dlaplilist [<LIST_FILE_PATH>]  => download all URLs in list file at /VidHop/import/list/dlapli.list"
  echo "    dlclist [<LIST_FILE_PATH>]     => download all URLs in list file at /VidHop/import/list/dlc.list"
  echo "    dlcilist [<LIST_FILE_PATH>]    => download all URLs in list file at /VidHop/import/list/dlci.list"
  echo "    dlpodlist [<LIST_FILE_PATH>]   => download all URLs in list file at /VidHop/import/list/dlpod.list"
  echo "    dltlist [<LIST_FILE_PATH>]     => download all URLs in list file at /VidHop/import/list/dlt.list"
  echo "    dlvlist [<LIST_FILE_PATH>]     => download all URLs in list file at /VidHop/import/list/dlv.list"
  echo "    dlvilist [<LIST_FILE_PATH>]    => download all URLs in list file at /VidHop/import/list/dlvi.list"
  echo "    dlvpllist [<LIST_FILE_PATH>]   => download all URLs in list file at /VidHop/import/list/dlvpl.list"
}

function dlalist () {
  list="$dlalist"
  log="$import_list_dir/log/dlalist.log"
  [ -n "$1" ] && list="$import_list_dir/custom/$1" && log="$import_list_dir/log/custom/$1.log"
  [ ! -f "$list" ] && echo "no file found at path '$list' which should point to a file containing only URLs, abort" && return

  date +'%d-%m-%Y_%H:%M:%S' >> "$log"
  while read -r url; do
    dla "$url"
    echo "$url" >> "$log"
  done <"$list"
}

function dlaclist () {
  list="$dlaclist"
  log="$import_list_dir/log/dlaclist.log"
  [ -n "$1" ] && list="$import_list_dir/custom/$1" && log="$import_list_dir/log/custom/$1.log"
  [ ! -f "$list" ] && echo "no file found at path '$list' which should point to a file containing only URLs, abort" && return

  date +'%d-%m-%Y_%H:%M:%S' >> "$log"
  while read -r url; do
    dlac "$url"
    echo "$url" >> "$log"
  done <"$list"
}

function dlacilist () {
  list="$dlacilist"
  log="$import_list_dir/log/dlacilist.log"
  [ -n "$1" ] && list="$import_list_dir/custom/$1" && log="$import_list_dir/log/custom/$1.log"
  [ ! -f "$list" ] && echo "no file found at path '$list' which should point to a file containing only URLs, abort" && return

  date +'%d-%m-%Y_%H:%M:%S' >> "$log"
  while read -r url; do
    dlaci "$url"
    echo "$url" >> "$log"
  done <"$list"
}

function dlalbumlist () {
  list="$dlalbumlist"
  log="$import_list_dir/log/dlalbumlist.log"
  [ -n "$1" ] && list="$import_list_dir/custom/$1" && log="$import_list_dir/log/custom/$1.log"
  [ ! -f "$list" ] && echo "no file found at path '$list' which should point to a file containing only URLs, abort" && return

  date +'%d-%m-%Y_%H:%M:%S' >> "$log"
  while read -r url; do
    dlalbum "$url"
    echo "$url" >> "$log"
  done <"$list"
}

function dlapllist () {
  list="$dlapllist"
  log="$import_list_dir/log/dlapllist.log"
  [ -n "$1" ] && list="$import_list_dir/custom/$1" && log="$import_list_dir/log/custom/$1.log"
  [ ! -f "$list" ] && echo "no file found at path '$list' which should point to a file containing only URLs, abort" && return

  date +'%d-%m-%Y_%H:%M:%S' >> "$log"
  while read -r url; do
    dlapl "$url"
    echo "$url" >> "$log"
  done <"$list"
}

function dlaplilist () {
  list="$dlaplilist"
  log="$import_list_dir/log/dlaplilist.log"
  [ -n "$1" ] && list="$import_list_dir/custom/$1" && log="$import_list_dir/log/custom/$1.log"
  [ ! -f "$list" ] && echo "no file found at path '$list' which should point to a file containing only URLs, abort" && return

  date +'%d-%m-%Y_%H:%M:%S' >> "$log"
  while read -r url; do
    dlapli "$url"
    echo "$url" >> "$log"
  done <"$list"
}

function dlclist () {
  list="$dlclist"
  log="$import_list_dir/log/dlclist.log"
  [ -n "$1" ] && list="$import_list_dir/custom/$1" && log="$import_list_dir/log/custom/$1.log"
  [ ! -f "$list" ] && echo "no file found at path '$list' which should point to a file containing only URLs, abort" && return

  date +'%d-%m-%Y_%H:%M:%S' >> "$log"
  while read -r url; do
    dlc "$url"
    echo "$url" >> "$log"
  done <"$list"
}

function dlcilist () {
  list="$dlcilist"
  log="$import_list_dir/log/dlcilist.log"
  [ -n "$1" ] && list="$import_list_dir/custom/$1" && log="$import_list_dir/log/custom/$1.log"
  [ ! -f "$list" ] && echo "no file found at path '$list' which should point to a file containing only URLs, abort" && return

  date +'%d-%m-%Y_%H:%M:%S' >> "$log"
  while read -r url; do
    dlci "$url"
    echo "$url" >> "$log"
  done <"$list"
}

function dlpodlist () {
  list="$dlpodlist"
  log="$import_list_dir/log/dlpodlist.log"
  [ -n "$1" ] && list="$import_list_dir/custom/$1" && log="$import_list_dir/log/custom/$1.log"
  [ ! -f "$list" ] && echo "no file found at path '$list' which should point to a file containing only URLs, abort" && return

  date +'%d-%m-%Y_%H:%M:%S' >> "$log"
  while read -r url; do
    dlpod "$url"
    echo "$url" >> "$log"
  done <"$list"
}

function dltlist () {
  list="$dltlist"
  log="$import_list_dir/log/dltlist.log"
  [ -n "$1" ] && list="$import_list_dir/custom/$1" && log="$import_list_dir/log/custom/$1.log"
  [ ! -f "$list" ] && echo "no file found at path '$list' which should point to a file containing only URLs, abort" && return

  date +'%d-%m-%Y_%H:%M:%S' >> "$log"
  while read -r url; do
    dlt "$url"
    echo "$url" >> "$log"
  done <"$list"
}

function dlvlist () {
  list="$dlvlist"
  log="$import_list_dir/log/dlvlist.log"
  [ -n "$1" ] && list="$import_list_dir/custom/$1" && log="$import_list_dir/log/custom/$1.log"
  [ ! -f "$list" ] && echo "no file found at path '$list' which should point to a file containing only URLs, abort" && return

  date +'%d-%m-%Y_%H:%M:%S' >> "$log"
  while read -r url; do
    dlv "$url"
    echo "$url" >> "$log"
  done <"$list"
}

function dlvilist () {
  list="$dlvilist"
  log="$import_list_dir/log/dlvilist.log"
  [ -n "$1" ] && list="$import_list_dir/custom/$1" && log="$import_list_dir/log/custom/$1.log"
  [ ! -f "$list" ] && echo "no file found at path '$list' which should point to a file containing only URLs, abort" && return

  date +'%d-%m-%Y_%H:%M:%S' >> "$log"
  while read -r url; do
    dlvi "$url"
    echo "$url" >> "$log"
  done <"$list"
}

function dlvpllist () {
  list="$dlvpllist"
  log="$import_list_dir/log/dlvpllist.log"
  [ -n "$1" ] && list="$import_list_dir/custom/$1" && log="$import_list_dir/log/custom/$1.log"
  [ ! -f "$list" ] && echo "no file found at path '$list' which should point to a file containing only URLs, abort" && return

  date +'%d-%m-%Y_%H:%M:%S' >> "$log"
  while read -r url; do
    dlvpl "$url"
    echo "$url" >> "$log"
  done <"$list"
}

function dlvplilist () {
  list="$dlvplilist"
  log="$import_list_dir/log/dlvplilist.log"
  [ -n "$1" ] && list="$import_list_dir/custom/$1" && log="$import_list_dir/log/custom/$1.log"
  [ ! -f "$list" ] && echo "no file found at path '$list' which should point to a file containing only URLs, abort" && return

  date +'%d-%m-%Y_%H:%M:%S' >> "$log"
  while read -r url; do
    dlvpli "$url"
    echo "$url" >> "$log"
  done <"$list"
}

# Write urls from channels to file.
function export_channel_urls() {
  youtube_channels_1="$import_dir/urls_export.txt"
  url_stream_txt="$import_dir/url_stream.txt"
  channel_stream_json="$import_dir/channel_stream.json"
  all_channels_json="$import_dir/all_channels.json"
  error_log="$import_dir/error.log"

  rm "$youtube_channels_1" "$url_stream_txt" "$channel_stream_json" "$all_channels_json" "$error_log"

  while read -r json_file; do
    channel_name=$(channel_name_from_json_file "$json_file")
    channel_url=$(channel_url_from_json_file "$json_file")

    [ -z "$channel_url" ] && echo "skipped processing $json_file \n> url of the channel_name was missing" &&
      echo "[$(date)] channel_name url missing in $json_file" >>"$error_log" && continue

    echo processing "$channel_name"...
    echo "$channel_url" >>"$url_stream_txt"
    printf "{\"channel_name\": \"%s\", \"channel_url\": \"%s\"}\n" "$channel_name" "$channel_url" >>"$channel_stream_json"
  done < <(find "$channels_meta_dir" ! -name "all_channels*.json" ! -name "avatar_data*.json" -type f -iname "*.json")

  allchans=$(jq -s '.' "$channel_stream_json" | jq 'sort_by(.channel_name) | unique_by(.channel_url)')

  jq '.[].channel_url' <<<"$allchans" | tr -d '"' >"$youtube_channels_1"
  jq <<<"$allchans" >"$all_channels_json"
}

# Merge subset metadata json of all channels and write one big file to channels metadata root directory.
function squashjson() {
  unset json

  while read -r chanjson; do
    echo "processing $chanjson..."
    channel_name=$(channel_name_from_json_file "$chanjson")
    channel_url=$(channel_url_from_json_file "$chanjson")

    channel_thumbnail_path=$(jq '.channel_thumbnail_path' "$chanjson" | tr -d '"')
    channel_thumbnail_url=$(jq '.channel_thumbnail_url' "$chanjson" | tr -d '"')
    platform=$(jq '.platform' "$chanjson")

    json+=$(
      jq --arg channel_name "$channel_name" \
        --arg channel_url "$channel_url" \
        --arg channel_thumbnail_path "$channel_thumbnail_path" \
        --arg channel_thumbnail_url "$channel_thumbnail_url" \
        --arg platform "$platform" \
        '.entries[] |
            {
              title: .title,
              description: .description,
              url: .webpage_url,
              thumbnail: .thumbnail,
              channel_name: $channel_name,
              channel_url: $channel_url,
              channel_thumbnail_path: $channel_thumbnail_path,
              channel_thumbnail_url: $channel_thumbnail_url,
              platform: $platform
            }
          ' "$chanjson"
    )
    unset channel_thumbnail_path channel_thumbnail_url platform
  done < <(find "$channels_meta_dir" ! -name "all_channels*.json" ! -name "avatar_data*.json" -type f -iname "*.json")

  jq -s 'map(select(.title != null))' <<<"$json" >"$channels_meta_dir/all_channels".json # remove { null: null} objects
  jq -s <<<"$json" >"$import_dir/squashed.json"
  unset json
}
