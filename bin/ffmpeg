#!/bin/bash
# TODO: https://github.com/CrypticSignal/better-ffmpeg-progress

# Video.
function 264encode() {
  [ -z "$1" ] &&
    echo "usage: convert264 <SRC_FILE.EXT> [<DEST_FILE.EXT>]" &&
    echo " info: converts the source file to x264 in the same location and appends '_264' if the destination filename was identical" && return

  src="$(realpath "$1")"
  [ ! -f "$src" ] && echo "file not found '$src', abort" && return
  dest="$(strip_extension "$src").mp4"                         # converts into the same location
  [ -f "$dest" ] && dest="$(strip_extension "$dest")_x264.mp4" # append _264 if the destination is also mp4

  ffmpeg -i "$src" -c:v libx264 -profile:v high -preset slow -f mp4 -tune film -crf 18 "$dest"
  echo "file conversion to x264 completed"
  ## instructions from https://lbry.com/faq/video-publishing-guide
  #ffmpeg -i input.avi -c:v libx264 -crf 21 -preset faster -pix_fmt yuv420p -maxrate 5000K -bufsize 5000K -vf 'scale=if(gte(iw\,ih)\,min(1920\,iw)\,-2):if(lt(iw\,ih)\,min(1920\,ih)\,-2)' -movflags +faststart -c:a aac -b:a 160k output.mp4
}

function 265encode() {
  [ -z "$1" ] &&
    echo "usage: convert264 <SRC_FILE.EXT> [<DEST_FILE.EXT>]" &&
    echo " info: converts the source file to x265 in the same location and appends '_265' if the destination filename was identical" && return

  src="$(realpath "$1")"
  [ ! -f "$src" ] && echo "file not found '$src', abort" && return
  dest="$(strip_extension "$src").mp4"                         # converts into the same location
  [ -f "$dest" ] && dest="$(strip_extension "$dest")_x265.mp4" # append _265 if the destination is also mp4

  ffmpeg -i "$src" -c:v libx265 -preset ultrafast -crf 23 -vtag hvc1 "$dest"
  echo "file conversion to x265 completed"
}

function to720p_x264(){
  input_file="$1"
  output_file="$(strip_extension "$input_file")_720p.$(get_extension "$input_file")"
  ffmpeg -i "$input_file" -vf scale=-1280:720 -c:v libx264 -crf 18 -preset veryslow -c:a copy "$output_file"
  echo "file conversion to 720p done"
  echo "result file is at '$output_file'"
}

function 265encode1080p() {
  [ -z "$1" ] &&
    echo "usage: convert264 <SRC_FILE.EXT> [<DEST_FILE.EXT>]" &&
    echo " info: converts the source file to x265 in the same location and appends '_265' if the destination filename was identical" && return

  src="$(realpath "$1")"
  [ ! -f "$src" ] && echo "file not found '$src', abort" && return
  dest="$(strip_extension "$src").mp4"                         # converts into the same location
  [ -f "$dest" ] && dest="$(strip_extension "$dest")_x265.mp4" # append _265 if the destination is also mp4

  ffmpeg -i "$src" -c:v libx265 -preset ultrafast -crf 23 -vtag hvc1 -vf scale=1920:1080 "$dest"
  echo "file conversion to x265 completed"
}

function cutvideo() {
  [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ] || [ -z "$4" ] && cat <<EOF && return
usage: cutvideo <START_TIME> <END_TIME> <INPUT_FILE> <OUTPUT_FILE>

time input formats:
    formats to be used for <START_TIME> and <END_TIME>
    h=hours, m=minutes, s=seconds, m=milliseconds

    hh:mm:ss        example: 01:30:52
    sss             example: 120

    hh:mm:ss.mmm    example: 01:30:52.123
    sss.mmm         example: 120.123

If cutvideo fails, converting the input video from mkv to mp4 can help (via OBS > file > remux, or via ffmpeg).
EOF

  ffmpeg -ss "$1" -to "$2" -i "$3" -c copy "$4"
}

mp3+thumbnail2video() {
  audio_file="$(realpath "$1")"
  image_file="$(realpath "$2")"
  output_file="$(strip_extension "$audio_file").mp4"
  [ -z "$output_file" ] && output_file="$3"
  [ -z "$audio_file" ] || [ -z "$image_file" ] || [ -z "$output_file" ] &&
    echo "usage: mp3+thumbnail2video <AUDIO_FILE> <IMAGE_FILE> [<OUTPUT_FILE>]" && return
  ffmpeg -loop 1 -r 1 -i "$image_file" -i "$audio_file" -c:a copy -shortest -c:v libx264 "$output_file"
}

function replaceaudio() {
  [ -z "$1" ] || [ -z "$2" ] && echo "usage: replaceaudio <VIDEO_FILE> <AUDIO_FILE>" && return
  video_file="$1"
  audio_file="$2"
  backup_file="$(prefix_extension "$video_file" backup)"
  cp "$video_file" "$backup_file"
  ffmpeg -i "$backup_file" -i "$audio_file" -c copy -map 0:v:0 -map 1:a:0 "$video_file"
}

# Audio.
function convert-to-mp3() {
  input_file="$1"
  [ ! -f "$input_file" ] && echo "not a file: $input_file" && return
		mp3_file="$(strip_extension "$input_file").mp3"
		ffmpeg -nostdin -v 5 -y -i "$input_file" -acodec libmp3lame -ac 2 -ab 192k "$mp3_file"
}

function strip-id3tags() {  # not ffmpeg
  id3convert --strip "$1" 2>/dev/null # strip all id-tags as some choke the car radio
}
