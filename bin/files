#!/bin/bash

function files_help() {
  echo " Title: files"
  echo " Description: Manage VidHop files."
  echo " Commands:"
  echo "    play                            => play last downloaded video in default media player e.g. MPV or VLC"
  echo "    play <PARTIAL_FILENAME>         => play video with filename that matches <PARTIAL_FILENAME> in default media player e.g. MPV or VLC"
  echo "    renvid <PARTIAL_OLD_FILENAME> <NEW_FILENAME>  => rename all files of a video that matches <PARTIAL_OLD_FILENAME>"
  echo "    renlast <NEW_FILENAME>          => rename all files of last downloaded video to <NEW_FILENAME>"
  echo "    rmvid <PARTIAL_FILENAME>        => remove all files of a video who's name matches <PARTIAL_FILENAME>"
  echo "    rmlast                          => remove all files of last downloaded video"
  echo "    rmchan <PARTIAL_CHANNEL_NAME>   => remove all files of a channel that matches <PARTIAL_CHANNEL_NAME>"
  echo "    specs                           => shows technical video information like codecs, resolution...of last downloaded video"
  echo "    specs <URL>                     => shows technical video information like codecs, resolution...of a video at <URL>"
  echo "    specs <PARTIAL_FILENAME>        => shows technical video information like codecs, resolution...of a video who's filename matches <PARTIAL_FILENAME>"
}

function play() {
  [ -z "$media_file" ] && [ -z "$1" ] && echo "no media file available and no user input received" && return
  [ -f "$1" ] && media_file="$1" || search_text="$1"

  if [ -n "$search_text" ]; then
    files=$(find "$vidhop_dir" -iname "*$1*mp4")
    echo "$files"
    count=$(wc -l <<<"$files")
    [ "$files" = "" ] && count=0

    [ "$count" -eq 0 ] && echo "found nothing for '$search_text'" && unset files && return
    [ "$count" -gt 1 ] &&
      echo -e "play requires 1 file but found $count $files\nyou can specifiy your search term further" &&
      unset files && return
    media_file="$files" && unset files
  fi
  ! [ -f "$media_file" ] && echo "cannot play file '$media_file'" && return

  [[ "$media_file" == *.mp4 ]] && "$video_app" "$media_file" && return
  [[ "$media_file" == *.mp3 ]] && "$audio_app" "$media_file" && return
  [[ "$media_file" == *.webp ]] && "$picture_app_alt" "$media_file" && return
  [[ "$media_file" == *.jpg ]] || [[ "$media_file" == *.jpg ]] && "$picture_app" "$media_file" && return
}

function path_newfile() {
  old_file="$1"
  new_name="$2"
  dir_name=$(dirname "$old_file")
  ext=$(get_extension "$old_file")
  echo "$dir_name/$new_name.$ext"
}

function rename_file() {
  old_file="$1"
  new_name="$2"
  new_file=$(path_newfile "$old_file" "$new_name")
  mv "$old_file" "$new_file"
  echo -e "> Renamed:\n$old_file\nTo:\n$new_file"
}

# Rename a video and its metadata.
function renvid() {
  [ -z "$1" ] || [ -z "$2" ] && echo -e "usage: renvid <OLD_NAME> <NEW_NAME>" && return
  [ "$(echo -n "$1" | wc -c)" -lt 5 ] && echo "old name has too few chars, abort" && return # a minimal safeguard
  old_name_search_term="$1"
  new_name="$2"

  meta_file=$(find "$vids_meta_dir" -type f -iwholename "*$old_name_search_term*/metadata.json")
  [ "$(echo "$meta_file" | wc -l)" -gt 1 ] && echo "found more than 1 metadata file, abort" && return

  old_meta_dir=$(dirname "$meta_file")
  old_name=$(basename "$old_meta_dir" .json)
  old_vid_dir="$(dirname "$(dirname "$meta_file" | sed 's;/VidHop/metadata/videos/;/VidHop/videos/;;')")"
  old_media_file="$old_vid_dir/$old_name.mp4"
  old_media_file_sub="$old_vid_dir/$old_name.en.srt"

  # show file found
  [ -d "$old_meta_dir" ] && echo "found '$old_meta_dir' (metadata directory)"
  [ -f "$old_media_file" ] && echo "found '$old_media_file'"
  [ -f "$old_media_file_sub" ] && echo "found '$old_media_file_sub'"
  # ask confirmation to rename
  echo -n "rename these files? Y/n: " && read -r answer
  answer=$(echo "$answer" | tr '[:upper:]' '[:lower:]')
  [ "$answer" = "n" ] && return

  # rename subs
  find "$old_meta_dir/subs" -maxdepth 1 -type f -iname "*$old_name_search_term*.srt" |
    while read -r file; do
      ext=$(get_sub_extension "$file")
      mv "$file" "$old_meta_dir/subs/$new_name.$ext"
    done
  find "$old_meta_dir/subs/auto-generated" -maxdepth 1 -type f -iname "*$old_name_search_term*.srt" |
    while read -r file; do
      ext=$(get_sub_extension "$file")
      mv "$file" "$old_meta_dir/subs/auto-generated/$new_name.$ext"
    done
  mv "$old_media_file_sub" "$old_vid_dir/$new_name.en.srt"
  # rename subs - end

  mv "$old_media_file" "$old_vid_dir/$new_name.mp4"
  mv "$old_meta_dir" "$(dirname "$old_meta_dir")/$new_name"
  name="$new_name"

  # rename history entry
  if [ -f "$titles_file" ]; then
    head -n -1 "$titles_file" >"$log_dir/titles.tmp.log"
    echo "$new_name" >>"$log_dir/titles.tmp.log"
    mv "$log_dir/titles.tmp.log" "$titles_file"
  fi

  echo "files have been renamed"
}

function renlast() {
  [ -z "$1" ] && echo "usage: renlast <NEW_NAME>" && return
  old_name=$(lasttitle)
  new_name="$1"
  renvid "$old_name" "$new_name"
}

function rmvid() {
  [ -z "$1" ] && echo "usage: rmvid <PARTIAL_VIDEO_NAME>" && return 1
  unset name answer results
  name="$1"
  [ "$2" = "-y" ] || [ "$2" = "--yes" ] && answer=y

  results=$(find "$vidhop_dir" -iname "*$name*")
  [ -z "$results" ] && echo found no matches && return
  echo "$results"

  if [ -z "$answer" ]; then
    echo -n "delete these files permanently? Y/n: " && read -r answer
    answer=$(echo "$answer" | tr '[:upper:]' '[:lower:]')
    [ "$answer" = "n" ] || [ "$answer" = "no" ] && return
  fi

  find "$vidhop_dir" -iname "*$name*" -prune -exec rm -rf {} \;
  echo "deleted files for '$name'"

  head -n -1 "$titles_file" >"$log_dir/titles.tmp.log"
  mv "$log_dir/titles.tmp.log" "$titles_file"
}

function rmlast() {
  rmvid "$(lasttitle)"
}

function find_archive_file_from_audio_channel_name() {
  name="$1"
  found_json=$(find "$music_meta_dir" -type f -iwholename "*$name**metadata.json")
  [ -z "$found_json" ] && return
  [ "$(wc -l <<<"$found_json")" -gt 1 ] && echo -e "found more than one file:\n$results" && return 1

  channel_url=$(jq '.original_url' "$found_json")
  archive_filename="$downloaded_dir/$(url_to_filename "$channel_url")"
  echo "$archive_filename"
}

function find_archive_file_from_channel_name() {
  name="$1"
  found_json=$(find "$channels_meta_dir" -type f -iwholename "*$name**metadata.json")
  [ -z "$found_json" ] && return
  [ "$(wc -l <<<"$found_json")" -gt 1 ] && echo -e "found more than one file:\n$results" && return 1

  channel_url=$(channel_url_from_json_file "$found_json")
  archive_filename=$(url_to_filename "$channel_url")
  find "$downloaded_dir" -type f -iname "$archive_filename"
}

function find_archive_file_from_url() {
  url="$1"
  archive_file="$downloaded_dir/$(url_to_filename "$url")"
  [ -f "$archive_file" ] && echo "$archive_file" && return
  logInfo "find_archive_file_from_url created an invalid archive file path: $archive_file"
}

function rmarchiveforurl() {
  url="$1"
  [ "$(is_url "$url")" = "false" ] && echo "not a valid url" && return 1

  archive_file=$(find_archive_file_from_url "$url")
  [ -f "$archive_file" ] && rm "$archive_file" && echo "removed $archive_file" && return
  echo "could not remove as file '$archive_file' does not exist"
}

function rmchan() {
  [ -z "$1" ] && echo "usage: rmchan <PARTIAL_CHANNEL_NAME>" && return 1
  unset answer found_channel_dir found_downloaded_file found_music_channel_dir found_music_channel_meta_dir
  name="$1"
  [ -n "$2" ] && answer="$2"
  found_channel_dir=$(find "$channels_dir" -maxdepth 1 -type d -iname "*$name*")
  found_channel_meta_dir=$(find "$channels_meta_dir" -maxdepth 1 -type d -iname "*$name*")
  found_music_channel_dir=$(find "$music_dir" -maxdepth 1 -type d -iname "*$name*")
  found_music_channel_meta_dir=$(find "$music_meta_dir" -maxdepth 1 -type d -iname "*$name*")
  found_downloaded_file=$(find_archive_file_from_channel_name "$name")
  found_music_downloaded_file=$(find_archive_file_from_audio_channel_name "$name")

  logInfo "downloaded archive file: $found_downloaded_file"
  [ ! -d "$found_channel_dir" ] && [ ! -d "$found_channel_meta_dir" ] &&
    [ ! -d "$found_music_channel_dir" ] && [ ! -d "$found_music_channel_meta_dir" ] &&
    [ ! -f "$found_downloaded_file" ] && [ ! -f "$found_music_downloaded_file" ] &&
    echo found no matches && return
  echo "found files:"
  [ -d "$found_channel_dir" ] && echo -e "$found_channel_dir"
  [ -d "$found_channel_meta_dir" ] && echo -e "$found_channel_meta_dir"
  [ -d "$found_music_channel_dir" ] && echo -e "$found_music_channel_dir"
  [ -d "$found_music_channel_meta_dir" ] && echo -e "$found_music_channel_meta_dir"
  [ -f "$found_downloaded_file" ] && echo -e "$found_downloaded_file"
  [ -f "$found_music_downloaded_file" ] && echo -e "$found_music_downloaded_file"

  if [ -z "$answer" ]; then
    echo "caution: rmchan will remove all media and metadata files of '$name' for all platforms"
    echo -n "delete channel permanently? Y/n: " && read -r answer
    answer=$(echo "$answer" | tr '[:upper:]' '[:lower:]')
    [ "$answer" = "n" ] && return
  fi

  # remove files
  [ -d "$found_channel_dir" ] && rm -rf "$found_channel_dir" && echo "deleted channel media directory: $found_channel_dir"
  [ -d "$found_channel_meta_dir" ] && rm -rf "$found_channel_meta_dir" && echo "deleted channel metadata directory: $found_channel_meta_dir"
  [ -d "$found_music_channel_dir" ] && rm -rf "$found_music_channel_dir" && echo "deleted channel media directory: $found_music_channel_dir"
  [ -d "$found_music_channel_meta_dir" ] && rm -rf "$found_music_channel_meta_dir" && echo "deleted channel metadata directory: $found_music_channel_meta_dir"
  [ -f "$found_downloaded_file" ] && rm "$found_downloaded_file" && echo "deleted downloaded archive file: $found_downloaded_file"
  [ -f "$found_music_downloaded_file" ] && rm "$found_music_downloaded_file" && echo "deleted downloaded archive file: $found_music_downloaded_file"
}

function rmartist() {
  [ -z "$1" ] && echo "usage: rmartist <PARTIAL_ARTIST_NAME>" && return 1
  unset answer found_artist_dir found_downloaded_file

  name="$1"
  [ -n "$2" ] && answer="$2"
  found_artist_dir=$(find "$music_dir" -maxdepth 1 -type d -iname "*$name*")
  found_artist_meta_dir=$(find "$music_meta_dir" -maxdepth 1 -type d -iname "*$name*")
  found_downloaded_file=$(find_archive_file_from_channel_name "$name" || echo "")

  logInfo "downloaded archive file: $found_downloaded_file"
  [ ! -d "$found_artist_dir" ] && [ ! -d "$found_artist_meta_dir" ] && [ ! -f "$found_downloaded_file" ] && echo found no matches && return
  echo "found files:"
  [ -d "$found_artist_dir" ] && echo -e "$found_artist_dir"
  [ -d "$found_artist_meta_dir" ] && echo -e "$found_artist_meta_dir"
  [ -f "$found_downloaded_file" ] && echo -e "$found_downloaded_file"

  if [ -z "$answer" ]; then
    echo "caution: rmchan will remove all media and metadata files of '$name' for all platforms"
    echo -n "delete channel permanently? Y/n: " && read -r answer
    answer=$(echo "$answer" | tr '[:upper:]' '[:lower:]')
    [ "$answer" = "n" ] && return
  fi

  # remove files
  [ -d "$found_artist_dir" ] && rm -rf "$found_artist_dir" && echo "deleted channel media directory: $found_artist_dir"
  [ -d "$found_artist_meta_dir" ] && rm -rf "$found_artist_meta_dir" && echo "deleted channel metadata directory: $found_artist_meta_dir"
  [ -f "$found_downloaded_file" ] && rm "$found_downloaded_file" && echo "deleted downloaded archive file: $found_downloaded_file"
}

function rmarchive() {
  [ -z "$1" ] && echo 'rmarchive $URL' && return
  url="$1"
  [[ "$url" != http* ]] && echo "invalid url '$url'" && return

  archive_to_be_removed="$downloaded_dir/$(url_to_filename "$url")"
  ! [ -f "$archive_to_be_removed" ] &&
    echo -e "tried to remove '$archive_to_be_removed' but file doesn't exist\nno downloaded archive file for url '$url'" &&
    return
  rm "$archive_to_be_removed" && echo "deleted $archive_to_be_removed"
}

function specs() {
  [ "$1" = "-h" ] || [ "$1" = "--help" ] && usage_specs
  if [ "$(is_url "$1")" = true ]; then
    yt-dlp -F --force-ipv4 "$1"
    yt-dlp -J --force-ipv4 "$1" | jq '{
      title: .title,
      original_url: .webpage_url,
      duration_string: .duration_string,
      resolution: .resolution,
      format: .format,
      dynamic_range: .dynamic_range,
      vcodec: .vcodec,
      acodec: .acodec,
      vbr: .vbr,
      abr: .abr,
    }'
  elif [ -f "$1" ]; then
    mediainfo "$1"
  else
    [ -z "$media_file" ] && echo "no media file from previous dlv execution to display" && usage_specs && return
    mediainfo "$media_file"
  fi
}

function mediafile() {
  echo "$media_file"
}

function treevidhopbefore() {
  ! [ -x "$(command -v tree)" ] && echo "'tree' command not installed" && return
  tree "$vidhop_dir" >"$log_dir/tree_vidhop_before"
}

function treevidhopafter() {
  ! [ -x "$(command -v tree)" ] && echo "'tree' command not installed" && return
  tree "$vidhop_dir" >"$log_dir/tree_vidhop_after"
}
