#!/bin/bash

fvid_help() {
  echo " Title: fvid"
  echo " Description: Find videos for <SEARCH_WORD> in all videos and channels metadata."
  echo " Commands:"
  echo "    fvid <SEARCH_TEXT>  => find videos where title or description matches <SEARCH_TEXT> in all videos and channels metadata"
  echo "    fvidv <SEARCH_TEXT> => find videos where title or description matches <SEARCH_TEXT> in all videos metadata (shorter search time)"
  echo "    fvidf <SEARCH_TEXT> => find videos where title or description matches <SEARCH_TEXT> in all video files on disk"
  echo "    fvidfc <TITLE_SEARCH_TEXT> <CHANNEL_SEARCH_TEXT> => find downloaded video files for channel in VidHop videos metadata dir, with video titles (filenames) that match <TITLE_SEARCH_TEXT> and a channels whose name matches <CHANNEL_SEARCH_TEXT>"
  echo "    fvidc <SEARCH_TEXT> => find videos where title or description matches <SEARCH_TEXT> in all channels metadata"
  echo "    fvidcv <CHANNEL_NAME> <SEARCH_TEXT> [<PLATFORM>] => find videos where title or description matches <SEARCH_TEXT> in channel with a name that matches <CHANNEL_NAME in a channels metadata for <PLATFORM> e.g youtube.com"
  echo "    fvidcv <CHANNEL_JSON_ABS_PATH> <SEARCH_TEXT> =>  find videos where title or description matches <SEARCH_TEXT> in channel with provided metadata JSON file"
  echo "    fvidusermeta <SEARCH_TEXT>  => find videos where user added metadata contains <SEARCH_TEXT>, execute 'metadata_help' for more information."
  echo "    chani <CHANNEL_NAME> => channel information, lists all videos of a channel with name matching <CHANNEL_NAME>"
  echo "    chani <CHANNEL_NAME> <PLATFORM> => channel information, lists all videos of a channel with name matching <CHANNEL_NAME> with platform matching <PLATFORM>"
}

clear_vars_fvid() {
  unset name text pwd json json_file json_files quiet more
}

# Helper methods - start.
init_vars() {
  [ -z "$1" ] && echo "init_vars function received no args" && return 1
  clear_vars_fvid

  if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    fvid_help
    return 2
  elif [ "$1" = '--quiet' ] || [ "$1" = '-q' ]; then
    quiet="true"
    text=$(echo "$2" | tr '[:upper:]' '[:lower:]')
    platform="$3"
  elif [ "$1" = '--reverse' ]; then
    reverse=true
    text=$(echo "$2" | tr '[:upper:]' '[:lower:]')
    platform="$3"
  else
    more=false && reverse=false
    text=$(echo "$1" | tr '[:upper:]' '[:lower:]')
    platform="$2"
  fi

  pwd=$(pwd)
}

oneliner_channel_entries() {
  channel_name_fallback="$(url_to_channel_name "$(jq .webpage_url <<<"$json" | tr -d '"')")"
  chani_entries=$(
    jq --arg 'channel_name_fallback' "$channel_name_fallback" '.entries | unique_by(.webpage_url) | sort_by(.upload_date) | .[]
          | "> " + .title + " | " + .webpage_url + " | " + .upload_date' <<<"$json" | sed 's/\\"/'\''/g' | tr -d '"'
  )
  #   | sed 's/\\"/'\''/g' | tr -d '"' removes the leading and trailing double quotes from each entry
  echo -e "${GREEN}$chani_entries"
}

format_oneliner() {
  [ -n "$1" ] && local json="$1"
  [ -n "$2" ] && [ "$2" = "videos" ] && echo -e "${NC}Videos search results:${GREEN}"
  [ -n "$2" ] && [ "$2" = "channels" ] && echo -e "${NC}Channels search results:${GREEN}"

  channel_name_fallback="$(url_to_channel_name "$(jq .webpage_url <<<"$json" | tr -d '"')")"
  jq --arg 'channel_name_fallback' "$channel_name_fallback" '.entries | unique_by(.webpage_url) | sort_by(.upload_date) | .[]
          | "> " +
            (if .uploader != null then .uploader else
              (if .channel != null then .channel else $channel_name_fallback end)
            end) + ": " +
            .title + " | " +
            .webpage_url + " | " +
            .upload_date' <<<"$json" | tr -d '"'
  [ -n "$2" ] && [ "$2" = "videos" ] && [ "$function" = fvid ] && echo -e "${NC}Still searching through channels...${GREEN}"
}

format_oneliner_reverse() { # reverse means ascending which suits 'newest first' in the console
  jq '.entries | unique_by(.webpage_url) | sort_by(.upload_date) | reverse | .[]
          | "> " +
            (if .uploader == null then .channel else .uploader end) + ": " +
            .title + " | " +
            .webpage_url + " | " +
            .upload_date' <<<"$json" | tr -d '"'
}

format_more_reverse() {
  jq '.entries | unique_by(.webpage_url) | sort_by(.upload_date) | reverse | .[] |
            {
              title: .title,
              description: .description,
              url: .webpage_url,
              thumbnail: .thumbnail,
              upload_date: .upload_date,
              channel: (if .uploader == null then .channel else .uploader end),
              channel_url: .channel_url,
            }' <<<"$json" | jq -s
}

oneliner_export_reverse() {
  jq '.entries | unique_by(.webpage_url) | sort_by(.upload_date) | reverse | .[]
          | "> " +
            (if .uploader == null then .channel else .uploader end) + ": " +
            .title + "||" +
            .webpage_url + "||" +
            .upload_date' <<<"$json" | tr -d '"'
}

opinionated_print() {
  [ "$more" = "true" ] && format_more && return
  [ "$reverse" = "true" ] && echo -e "${GREEN}$(format_oneliner_reverse)" && return
  echo -e "${GREEN}$(format_oneliner "$1" "$2")"
}

save_fvid() {
  create_export_dirs
  oneliner_export_reverse >"$fvid_export_dir/oneliners/$text"
  format_more_reverse >"$fvid_export_dir/compact/$text"
  jq <<<"$json" >"$fvid_export_dir/full/$text"
}

msg_multiple_channels_found() {
  if [ -n "$1" ]; then command="$1"; else echo "no arg passed in function msg_multiple_channels_found, called from $command" && return 0; fi
  echo "found more than one metadata JSON file"
  echo "$json_files"
  echo "pass the platform name to specify further"
  [ "$command" = "fvidc" ] && echo "usage: $command <PARTIAL_CHANNEL_NAME> <SEARCH_TEXT> <PLATFORM>" && return
  echo "usage: $command <PARTIAL_CHANNEL_NAME> <PLATFORM>"
}

# `say --overwrite` will leave behind lines that are too big for the terminal size e.g. when terminal size is 80 while string is 120.
say() {
  [ "$quiet" = "true" ] && return
  if [ "$1" = "--overwrite" ] || [ "$1" = "-o" ]; then
    clear_last_line
    file="$(echo "$2" | tr -d "'" | sed "s/.json//g")" # remove quotes and '.json' from filename
    # 1. remove VidHop root from path; 2. trim down to 'screensize - ".json" (5 chars)'; 3. append '.json'
    echo "${NC}$(echo -en "${NC}${file#$subtract}" | cut -c -"$(("$workstation_screen_char_count" - 5))").json"
    return
  fi
  echo -e "${NC}$1"
}

print_msg_for_error_code() {
  [ "$1" -eq 1 ] && echo -e "found no match for '$search_text', abort" && return
  [ "$1" -eq 2 ] && echo -e "found multiple possibilities for '$search_text':\n$result\nabort" && return
}

find_one_video() {
  [ -z "$1" ] && echo "usage: find_one_video <PARTIAL_NAME>" && return
  unset search_text && search_text="$1"
  [ -f "$search_text" ] && echo "$search_text" && return

  result=$(find "$vids_dir" -iregex '.*'"$search_text"'.*\.\(mp4\|mkv\|webm\|mov\|wmv\|avi\|m4v\)')
  echo -e "$result"
  [ "$(wc -w <<<"$result")" -eq 0 ] && return 1
  [ "$(wc -l <<<"$result")" -gt 1 ] && return 2
  return 0
}

find_one() {
  [ -z "$1" ] || [ -z "$2" ] && echo "usage: find_one <TYPE_FILE_OR_DIR> <PARTIAL_NAME> [<DIRECTORY>]" && return
  if [ -n "$3" ]; then search_dir="$3"; else search_dir="$projects_dir"; fi
  unset search_text && search_text="$2"
  type="$1"

  [ -f "$search_text" ] && echo "$search_text" && return
  searchable_text="$(enhance_searchability "$search_text")"
  result=$(find "$search_dir" -type "$type" -iwholename "*$searchable_text*")
  echo -e "$result"
  [ "$(wc -w <<<"$result")" -eq 0 ] && return 1
  [ "$(wc -l <<<"$result")" -gt 1 ] && return 2
  return 0
}

find_one_vmeta() {
  [ -z "$1" ] && echo "usage: find_one_vmeta <VIDEO_SEARCH_TEXT> [<PLATFORM>]" && return
  search_text="$1"
  platform="$2"

  [ -f "$search_text" ] && echo "$search_text" && return
  result=$(find_one f "*$platform*$search_text*metadata.json" "$vids_meta_dir")
  error=$?
  echo "$result"
  [ "$error" = 1 ] && return 1
  [ "$error" = 2 ] && return 2
  return 0
}

find_one_cmeta() {
  [ -z "$1" ] && echo "usage: find_one_cmeta <CHANNEL_SEARCH_TEXT> [<PLATFORM>]" && return
  search_text="$1"
  platform="$2"

  [ -f "$search_text" ] && echo "$search_text" && return
  result=$(find_one f "*$search_text*$platform*metadata.json" "$channels_meta_dir")
  error=$?
  echo -e "$result"
  if [ "$error" = 1 ]; then return 1; elif [ "$error" = 2 ]; then return 2; else return 0; fi
}

fvidv() {
  init_vars "$@" || return
  case $? in # exit code of init_vars
  1) echo "failed to initiate vars (function init_vars)" ;;
  2) return 0 ;; # fvid --help was called and shown, exit program.
  esac

  say "searching in videos metadata at $vids_meta_dir..."
  while read -r vidjson; do
    # match the filename to the search text with spaces replaced by *
    [[ "$(echo "$vidjson" | tr '[:upper:]' '[:lower:]' | tr ' ' '-')" == *"$(echo "$text" | tr ' ' '-')"* ]] &&
      videos+=$(jq . "$vidjson") && continue
    # search after matches inside the json file
    videos+=$(
      jq --arg text "$text" '
            select(
                ( if .title != null then select(.title | ascii_downcase | contains($text)) else empty end ) or
                ( if .description != null then select(.description | ascii_downcase | contains($text)) else empty end )
            )' "$vidjson"
    )
    [ ! $? = 0 ] && echo "jq could not parse '$vidjson'"
  done < <(find "$vids_meta_dir" -type f -iname "*.json")

  videos=$(jq -s '{ entries: . }' <<<"$videos")
  [ "$(jq '.entries | length' <<<"$videos")" -eq 0 ] && echo "found nothing in videos metadata" && return
  opinionated_print "$videos" "videos"
}

fvidc() {
  init_vars "$@" || return
  case $? in # exit code of init_vars
  1) echo "failed to initiate vars (function init_vars)" ;;
  2) return 0 ;; # fvid --help was called and shown, exit program.
  esac

  say "searching in channels metadata at $channels_meta_dir..."
  while read -r chanjson; do
    channels+=$(
      jq --arg text "$text" '.entries[] |
              select(
                  ( if .title != null then select(.title | ascii_downcase | contains($text)) else empty end ) or
                  ( if .description != null then select(.description | ascii_downcase | contains($text)) else empty end )
              )' "$chanjson"
    )
    [ ! $? = 0 ] && echo "jq could not parse '$chanjson'"
  done < <(find "$channels_meta_dir" ! -name "avatar_data*json" -type f -iname "*json")

  channels=$(jq -s '{ entries: . }' <<<"$channels")
  [ "$(jq '.entries | length' <<<"$channels")" -eq 0 ] && echo "found nothing in channels metadata" && return
  opinionated_print "$channels" "channels"
}

fvid() {
  function=fvid
  (fvidv "$1" &)
  (fvidc "$1" &)
  wait
  unset function
}

fvidcv() {
  [ -z "$1" ] || [ -z "$2" ] &&
    echo "usage: fvidcv <CHANNEL_SEARCH_TEXT> <TITLE_SEARCH_TEXT> [<PLATFORM>]" &&
    echo "       fvidcv <CHANNEL_JSON_ABS_PATH> <TITLE_SEARCH_TEXT>" && return
  channel_search_text="$(echo "$1" | tr '[:upper:]' '[:lower:]')"
  search_text="$(echo "$2" | tr '[:upper:]' '[:lower:]')"
  platform="$3"

  json_file=$(find_one_cmeta "$channel_search_text" "$platform")
  [ ! $? = 0 ] && return

  result=$(
    jq --arg search_text "$search_text" '.entries[] |
              select(
                  ( if .title != null then select(.title | ascii_downcase | contains($search_text)) else empty end ) or
                  ( if .description != null then select(.description | ascii_downcase | contains($search_text)) else empty end )
              )' "$json_file"
  )
  echo "search done"

  json=$(jq -s '{ entries: . }' <<<"$result")
  [ "$(jq '.entries | length' <<<"$json")" -eq 0 ] && echo "found nothing" && return
  opinionated_print
}

fvidfc() {
  [ -z "$1" ] &&
    echo "  usage: fvidfc <TITLE_SEARCH_TEXT> <CHANNEL_SEARCH_TEXT>" &&
    echo "   info: find downloaded video files for channel in VidHop videos metadata dir," &&
    echo "         with video titles (filenames) that match <TITLE_SEARCH_TEXT>" &&
    echo "         and a channels whose name matches <CHANNEL_SEARCH_TEXT>" && return
  [ $# = 1 ] && title_search_text="*" && channel_search_text="$(echo "$1" | tr '[:upper:]' '[:lower:]')"
  [ $# = 2 ] &&
    title_search_text="$(echo "$1" | tr '[:upper:]' '[:lower:]')" &&
    channel_search_text="$(echo "$2" | tr '[:upper:]' '[:lower:]')"

  echo "searching through video files..."
  results="$(
    find "$vids_meta_dir" -type f -iwholename "*$title_search_text*metadata.json" |
      while read -r json; do
        jq -r --arg title_search_text "$title_search_text" --arg channel_search_text "$channel_search_text" '
          if .vh_downloaded == "true"
            and .title != null
            and (if .uploader != null then .uploader | ascii_downcase | contains($channel_search_text) else empty end)
          then .uploader + ": " + .title + "\n" + .vh_media_file + "\n" + .webpage_url + "\n"
          elif .vh_downloaded == "true"
            and .title != null
            and (if .channel != null then .channel | ascii_downcase | contains($channel_search_text) else empty end)
          then .channel + ": " + .title + "\n" + .vh_media_file + "\n" + .webpage_url + "\n"
          else empty end' "$json"
      done
  )"
  echo -e "${GREEN}$results${NC}"
  echo "search completed"
}

set_vars_single_result() {
  if [ "$(echo "$result" | wc -l)" = 1 ]; then
    media_file="$(remove_leading_trailing_double_quotes "$result")"
    filename="$(basename "$media_file")"
  fi
}

# Output all video files whose name match your query.
fvidf() { # find video files (on disk)
  [ -z "$1" ] && echo "  usage: fvidf <SEARCH_TEXT>" && echo "returns: absolute paths of videos files on disk that match <SEARCH_TERM>" && return
  search_text="$(enhance_searchability "$1")"
  unset result
  found_something="false"

  result=$(find "$podcasts_dir" -not -path "*.srt" -type f -iname "*$search_text*" | prefix_suffix_with_double_quotes | sort)
  [ "$(wc --words <<<"$result")" -gt 0 ] &&
    echo -e "> Podcast downloads in VidHop directory search result:" && echo -e "${GREEN}$result${NC}" &&
    set_vars_single_result && unset result && found_something="true"

  result=$(find "$channels_dir" -not -path "*.srt" -type f -iname "*$search_text*" | prefix_suffix_with_double_quotes | sort)
  [ "$(wc --words <<<"$result")" -gt 0 ] &&
    echo -e "> Channel downloads in VidHop directory search result:" && echo -e "${GREEN}$result${NC}" &&
    set_vars_single_result && unset result && found_something="true"

  result=$(find "$vids_dir" -not -path "*.srt" -type f -iname "*$search_text*" | prefix_suffix_with_double_quotes | sort) # sed adds quotes for filenames with spaces
  [ "$(wc --words <<<"$result")" -gt 0 ] &&
    echo -e "> Video downloads in VidHop directory search result:" && echo -e "${GREEN}$result${NC}" &&
    set_vars_single_result && unset result && found_something="true"

  [ "$found_something" = "false" ] && echo "found nothing"
}

# Output all video files whose name match your query.
fvidfall() { # find video files (on disk)
  [ -z "$1" ] && echo "  usage: fvidf <SEARCH_TEXT>" && echo "returns: absolute paths of videos files on disk that match <SEARCH_TERM>" && return
  search_text="$(enhance_searchability "$1")"
  unset result
  found_something="false"

  result=$(find -L "$shared/Movies" \
    -not \( -path "$vidhop_dir" -prune \) \
    -not -path "*.srt" \
    -not -path "*.jpg" \
    -not -path "*.webp" \
    -not -path "*.png" \
    -type f -iname "*$search_text*" | prefix_suffix_with_double_quotes | sort)
  [ "$(wc --words <<<"$result")" -gt 0 ] &&
    echo -e "> Videos in user home directory result:" && echo -e "${GREEN}$result${NC}" &&
    unset result && found_something="true"

  result=$(find "$podcasts_dir" -not -path "*.srt" -type f -iname "*$search_text*" | prefix_suffix_with_double_quotes | sort)
  [ "$(wc --words <<<"$result")" -gt 0 ] &&
    echo -e "> Podcast downloads in VidHop directory search result:" && echo -e "${GREEN}$result${NC}" &&
    unset result && found_something="true"

  result=$(find "$channels_dir" -not -path "*.srt" -type f -iname "*$search_text*" | prefix_suffix_with_double_quotes | sort)
  [ "$(wc --words <<<"$result")" -gt 0 ] &&
    echo -e "> Channel downloads in VidHop directory search result:" && echo -e "${GREEN}$result${NC}" &&
    unset result && found_something="true"

  result=$(find "$vids_dir" -not -path "*.srt" -type f -iname "*$search_text*" | prefix_suffix_with_double_quotes | sort) # sed adds quotes for filenames with spaces
  [ "$(wc --words <<<"$result")" -gt 0 ] &&
    echo -e "> Video downloads in VidHop directory search result:" && echo -e "${GREEN}$result${NC}" &&
    unset result && found_something="true"

  [ "$found_something" = "false" ] && echo "found nothing"
}

# Creates symlinks from fvidf results in the project /vid directory.
fvidf-symlinks2dir() {
  [ -z "$1" ] && echo "usage: fvidf-symlinks2dir <SEARCH_TEXT> <DEST_DIR>" &&
    echo " info: creates symbolic links in <DEST_DIR> for all video files returned by searching for <SEARCH_TEXT>" && return
  search_text="$(enhance_searchability "$1")"
  dest_dir="$2"
  mkdir -p "$dest_dir"

  unset result
  found_something="false"

  result_vids=$(find "$vids_dir" -not -path "*.srt" -type f -iname "*$search_text*") # sed adds quotes for filenames with spaces
  result_channels=$(find "$channels_dir" -not -path "*.srt" -type f -iname "*$search_text*")
  result_podcasts=$(find "$podcasts_dir" -not -path "*.srt" -type f -iname "*$searchable_text*")
  [ "$(wc -w <<<"$result_podcasts")" -gt 0 ] && result+="$result_podcasts\n" && found_something="true"
  [ "$(wc -w <<<"$result_channels")" -gt 0 ] && result+="$result_channels\n" && found_something="true"
  [ "$(wc -w <<<"$result_vids")" -gt 0 ] && result+="$result_vids\n" && found_something="true"
  [ "$found_something" = "false" ] && echo "found nothing" && return

  echo "Found $(wc -l <<<"$result") video files!" && sleep 2
  echo "$result" && sleep 1
  echo "Create links to video files in '$dest_dir' in 3 seconds."
  echo "Hit CTRL-C to abort."
  echo -n "3..." && sleep 1 && echo -n "2..." && sleep 1 && echo -n "1..." && sleep 1 && echo

  echo "Creating links to video files in '$dest_dir'..."
  list="$dest_dir/titles_and_links.md"
  [ -f "$list" ] && rm "$list"
  cd "$dest_dir"
  while read -r file; do
    [ -z "$file" ] && continue
    if [ -f "$file" ]; then
      ln -s "$file" "$(basename "$file")" 2>/dev/null
      # write title & link to markdown file
      metadata="$(strip_extension "$(echo "$file" | sed 's;/videos/;/metadata/videos/;g')")/metadata.json"
      if [ -f "$metadata" ]; then
        line="$(jq '"- [" + .title + "](" + .webpage_url + ")"' "$metadata" | prefix_suffix_with_double_quotes)"
        echo "$line" >>"$list"
      fi
    else
      echo "file error for '$file'"
    fi
  done < <(echo -e "$result")
  echo "Done creating links to video files in '$dest_dir'."
}

format_usermeta() {
  jq '.entries | unique_by(.webpage_url) | sort_by(.upload_date) | .[]
          | "> " +
            (if .uploader == null then .channel else .uploader end) +
            ": " + .title +
            " | " + .webpage_url +
            " | " + .upload_date +
            (if .vh_speakers != null then " | speakers: " + .vh_speakers else null end) +
            (if .vh_summary != null then " | summary: " + .vh_summary else null end) +
            (if .vh_description != null then " | description: " + .vh_description else null end) +
            (if .vh_topics != null then " | topics: " + .vh_topics else null end) +
            (if .vh_categories != null then " | categories: " + .vh_categories else null end)' <<<"$json" | tr -d '"'
}

print_usermeta() {
  echo -e "${GREEN}$(format_usermeta)"
}

fvidusermeta() {
  init_vars "$@" || return
  case $? in # exit code of init_vars
  1) echo "failed to initiate vars (function init_vars)" ;;
  2) return 0 ;; # fvid --help was called and shown, exit program.
  esac

  say "Searching in vidhop videos metadata at $vids_meta_dir..."
  say "Searching in single videos metadata...\n"
  while read -r vidjson; do
    subtract="$vids_meta_dir/" && say -o "$vidjson"
    json+=$(
      jq --arg text "$text" '
            select(
              ( if .vh_creators != null then select(.vh_creators | ascii_downcase | contains($text)) else null end ) or
              ( if .vh_summary != null then select(.vh_summary | ascii_downcase | contains($text)) else empty end ) or
              ( if .vh_description != null then select(.vh_description | ascii_downcase | contains($text)) else empty end ) or
              ( if .vh_speakers != null then select(.vh_speakers | ascii_downcase | contains($text)) else empty end ) or
              ( if .vh_topics != null then select(.vh_topics | ascii_downcase | contains($text)) else empty end ) or
              ( if .vh_categories != null then select(.vh_categories | ascii_downcase | contains($text)) else empty end )
            )' "$vidjson"
    )
  done < <(find "$vids_meta_dir" -type f -iname "*.json") && clear_last_line
  echo "search done"

  json=$(jq -s '{ entries: . }' <<<"$json")
  [ "$(jq '.entries | length' <<<"$json")" -eq 0 ] && echo "found nothing" && return
  print_usermeta
}

json_files_for_channel_name() {
  name="$1" platform="$2"
  find "$channels_meta_dir" -type f ! -iname "*avatar_data*json" -iwholename "*$name*$platform*json"
}

print_channel_label() {
  label="  $(channel_name) | $(channel_url)"
  echo -e "\n${GREEN}$(underline "$label")${NC}" && echo
}

print_channel_data() {
  channel_url="$(channel_url)"
  url_msg=" channel_url : $channel_url"
  print_line_for_msg "$url_msg"
  echo " channel_name: $(channel_name)"
  echo "  channel_url: $channel_url"
  echo " first_upload: $(first_channel_upload)"
  echo " count_videos: $(jq '.entries | length' <<<"$json")"
  echo
}

# Show all videos of a channel, one line per video.
chani() { # channel info
  [ -z "$1" ] &&
    echo "usage: chani <CHANNEL_SEARCH_TEXT> [<PLATFORM>]" &&
    echo "       chani <ABS_FILE_PATH> [<PLATFORM>]" && return
  search_text="$1"
  platform="$2"

  if [ -f "$search_text" ] && [[ "$search_text" == *.json ]]; then
    json_file="$search_text"
    json=$(jq '.' "$search_text")
  else
    result=$(find_one_cmeta "$search_text" "$platform")
    error=$?
    [ ! "$error" = 0 ] && print_msg_for_error_code "$error" && return
    json=$(jq '.' "$result")
  fi

  print_channel_label
  oneliner_channel_entries
  print_channel_data
}

chancount() {
  [ -z "$1" ] && echo "usage: chancount <PARTIAL_CHANNEL_NAME> [<PLATFORM>]" && return
  name="$1" platform="$2"

  json_files=$(json_files_for_channel_name "$name" "$platform")
  [ -z "$json_files" ] && echo no match found && return 0
  [[ "$json_files" == *$'\n'* ]] && msg_multiple_channels_found "chancount" && return 0

  json_file="$json_files" && unset json_files # only one entry in json_files

  jq '.entries | length' "$json_file"
}

channel_url_from_name() {
  [ -z "$1" ] && echo "usage: channel_url_from_name <PARTIAL_CHANNEL_NAME> [<PLATFORM>]" && return
  name="$1" platform="$2"

  json_files=$(json_files_for_channel_name "$name" "$platform")
  [ -z "$json_files" ] && echo no match found && return 0
  [[ "$json_files" == *$'\n'* ]] && msg_multiple_channels_found "channel_url_from_name" && return 0
  json_file="$json_files" && unset json_files # only one entry in json_files

  channel_url_from_json_file "$json_file"
}

json_files_for_video_name() {
  name=$(echo "$1" | tr " \- " '*' | tr "\-" '*' | tr ":" '*')
  platform="$2"
  find "$vids_meta_dir" -type f -iwholename "*$platform*$name*json"
}

find_thumb_from_name() {
  [ -n "$1" ] && the_name="$1" || the_name="$name"
  [ -z "$1" ] && echo "no search term available to find thumb file" && return
  file="$thumbnails_dir/$platform/$the_name.jpg"
  [ -f "$file" ] && echo "$file" && return
  file="$thumbnails_dir/$platform/$the_name.jpeg"
  [ -f "$file" ] && echo "$file" && return
  file="$thumbnails_dir/$platform/$the_name.png"
  [ -f "$file" ] && echo "$file" && return
  file="$thumbnails_dir/$platform/$the_name.webp"
  [ -f "$file" ] && echo "$file" && return
}

find_thumb_from_meta_filename() {
  [ -z "$1" ] || [[ "$1" != *.json ]] && return
  stripped_name=$(basename "$1" .json)
  file="$thumbnails_dir/$platform/$stripped_name.jpg"
  [ -f "$file" ] && echo "$file" && return
  file="$thumbnails_dir/$platform/$stripped_name.jpeg"
  [ -f "$file" ] && echo "$file" && return
  file="$thumbnails_dir/$platform/$stripped_name.png"
  [ -f "$file" ] && echo "$file" && return
  file="$thumbnails_dir/$platform/$stripped_name.webp"
  [ -f "$file" ] && echo "$file" && return
}

create_export_dirs() {
  mkdir -p \
    "$fvid_export_dir/full" \
    "$fvid_export_dir/compact" \
    "$fvid_export_dir/oneliners" \
    "$fvid_export_dir/merge/full" \
    "$fvid_export_dir/merge/compact" \
    "$fvid_export_dir/merge/oneliners" \
    "$wp_export_dir/full" \
    "$wp_export_dir/compact" \
    "$wp_export_dir/oneliners" \
    2>/dev/null
}

create_merge_export_dirs() {
  mkdir -p \
    "$fvid_export_dir/merge/full" \
    "$fvid_export_dir/merge/compact" \
    "$fvid_export_dir/merge/oneliners" \
    2>/dev/null
}

# merges all files in export/fvid/full and outputs to merge/full, merge/compact and merge/oneliners
merge_fvid_exports() {
  [ -z "$1" ] && echo "provide the name of the merge file (in quotes if it has spaces)" && return
  name="$1" # name="merge_$(date +'%d-%m-%Y_%H:%M:%S')" ||
  create_merge_export_dirs

  unset json
  while read -r file; do
    [ "$(jq '.entries | length' "$file")" -gt 0 ] && json+=$(jq '.entries[]' "$file") # add together all fvid results
  done < <(find "$fvid_export_dir/full" -type f) # use full json data

  json=$(jq -s '{entries: unique_by(.webpage_url) | sort_by(.upload_date) | reverse}' <<<"$json") # remove duplicates

  jq <<<"$json" >"$fvid_export_dir/merge/full/$name"                # write full json merge
  format_more_reverse >"$fvid_export_dir/merge/compact/$name"       # write compact json merge
  oneliner_export_reverse >"$fvid_export_dir/merge/oneliners/$name" # write oneliner merge

  jq <<<"$json"
}

# 1. user did multiple fvid queries and filled up fvid/full | compact | oneliners
# 2. merge fvid queries, fills up merge/full | compact | oneliners
# 3. convert fvid/merge/oneliners to fvid/merge/oneliners
# TODO: path to Python project won't work for users.
wp_convert_fvid_merge() {
  [ -z "$1" ] && echo "provide the name of the merge file (in quotes if it has spaces)" && return
  name="$1" # name="merge_$(date +'%d-%m-%Y_%H:%M:%S')" ||

  merge_fvid_exports "$name"

  pwd=$(pwd)
  mkdir -p "$wp_export_dir/merge/oneliners"
  cd "$vidhop_app_dir" || return 1
  python -m cli.vidhop --wp-convert --merge-exports
  cd "$pwd" || return 1

  code "$wp_export_dir/merge/oneliners/$name"
}

# Converts one fvid export file to a wp_convert file (WordPress HTML).
wp_convert_fvid_oneliner_file() {
  [ -z "$1" ] && echo "provide fvid oneliner file input" && return

  input_file="$fvid_export_dir/oneliners/$1"
  ! [ -f "$input_file" ] && echo "in exports/fvid/oneliners/$1 not found" && return 1

  pwd=$(pwd)
  mkdir -p "$wp_export_dir/merge/oneliners"
  cd "$vidhop_app_dir" || return 1
  python -m cli.vidhop --wp-convert --input-file "$input_file"
  cd "$pwd" || return 1
}

clear_fvid() { # clear all fvid results
  rm -rf "$fvid_export_dir"
}

rm_fvid() { # clear one fvid result
  [ -z "$1" ] && echo -e "please provide the fvid search text of which you want to delete the results"
  find "$fvid_export_dir" -iname "$1" -exec rm {} \;
}

ls_fvid() { # list fvid results
  ls -l "$fvid_export_dir/full"
}

rm_wp_merge() {
  [ -z "$1" ] && echo -e "please provide the file name of the merge you want to delete\n"
  find "$wp_export_dir/merge" -iname "$1" -exec rm {} \;
}

clear_wp() {
  rm -rf "$wp_export_dir/merge"
}

ls_wp() {
  ll -l "$wp_export_dir/merge"
}

# Find audio file.
faudf() {
  search_text="$(echo "$1" | tr ' ' '*')"
  unset result
  found_something="false"

  result=$(find "$(realpath "$music_dir")" -type f -iname "*$search_text*" | prefix_suffix_with_double_quotes | sort) # sed adds quotes for filenames with spaces
  [ "$(wc --words <<<"$result")" -gt 0 ] &&
    echo -e "> VidHop music directory search results:" &&
    echo -e "${GREEN}$result${NC}" &&
    unset result && found_something="true"

  result=$(find "$(realpath "$music_dir_ws")" -type f -iname "*$search_text*" | prefix_suffix_with_double_quotes | sort) # sed adds quotes for filenames with spaces
  [ "$(wc --words <<<"$result")" -gt 0 ] &&
    echo -e "> User music directory search results:" &&
    echo -e "${GREEN}$result${NC}" &&
    unset result && found_something="true"

  [ "$found_something" = "false" ] && echo "found nothing"
}
