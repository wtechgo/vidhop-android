#!/bin/bash
# While reading the code, differentiate between "projects" in plural, which is the directory
# that holds all individual projects which are referred to in singular as "project".

project_help() {
  echo " Title: project"
  echo " Description: Create and manage projects with as scaffold directory structure 'doc, img, vid and site'."
  echo " Commands:"
  echo "    project <PROJECT_NAME> => Create new project with <PROJECT_NAME> in \$projects_dir."
  echo "    writeproject <PROJECT_NAME> => Write project. Opens  <PROJECT_NAME>.md with the text editor configured in config.ini."
  echo "    wproj <PROJECT_NAME> => Alias for 'writeproject'."
  echo "    fproj <SEARCH_TEXT>      => Find files whose name match <SEARCH_TEXT> in all projects."
  echo "    cdproject <PROJECT_NAME> => Change the terminal working directory to the project directory."
  echo "    renproject <PROJECT_NAME> <NEW_PROJECT_NAME> => Rename all directories from <PROJECT_NAME> to <NEW_PROJECT_NAME>."
  echo "    linkvideos4project <SEARCH_TEXT> <PROJECT_NAME> => Creates symbolic links in <PROJECT_NAME> for all video files found by fvidf <SEARCH_TEXT> (happens in the background)."
  echo "    linkvideo4project <VIDEO_FILE> <PROJECT_NAME>   => Creates a symbolic link of given <VIDEO_FILE> in project with name <PROJECT_NAME>."
  echo "    fvidf4project <PROJECT_NAME> => Alias for function 'linkvideo4project'."
  echo "    videos2links [<DIR>] => Write channel, title and url of each video file (or symlink) in <DIR> to links.txt and links.md in <DIR> or \$PWD if <DIR> was not provided."
  echo "    renlink+source <SYMLINK_FILE_NAME> => Rename symbolic link file name and the file name of the source it points to."
  echo "    cleanproj <PROJECT_NAME> => Remove all files but keep the directory structure for project with <PROJECT_NAME>."
  echo "    rmproject <PROJECT_NAME> => Remove the project with as name <PROJECT_NAME>."
  echo "    subproject <PROJECT_NAME> <SUBPROJECT_NAME> => Create new subproject in <PROJECT_NAME> as <SUBPROJECT_NAME>."
  echo "    rensubproject <SUB_PROJECT_NAME> <NEW_SUB_PROJECT_NAME> => Rename all directories from <SUB_PROJECT_NAME> to <NEW_SUB_PROJECT_NAME>."
  echo "    rmsubproject <PROJECT_NAME> <SUB_PROJECT_NAME> => Remove sub project with name <SUB_PROJECT_NAME> from parent project with name <PROJECT_NAME>."
  echo "    vproject <VIDEO_PROJECT_NAME> => Create video project in \$video_projects_dir, variable defined in config.ini."
  echo "    rmjs <DIR_PATH> => Remove all .js files recursively, start in <DIR_PATH>."
  echo "    wlink <URL> [<DIRECTORY]> => Create a shortcut to a web page."
}

project_markdown_scaffold() {
  if [ -n "$subproject_name" ]; then echo "# $subproject_name"; else echo "# $project_name"; fi
  cat <<EOF

## Videos

[]()

[]()

## Websites

[]()

[]()

## Studies & Books

[]()

[]()

## Glossary

| Term | Definition |
| ---- | ---------- |
|      |            |
EOF
}

vproject() {
  [ -z "$1" ] || [ "$1" = "." ] || [ "$1" = ".." ] || [ "$1" = "/" ] && echo "Usage: vproject <PROJECT_NAME>" && return
  vproject_name="$1"
  vproject_dir="$video_projects_dir/$vproject_name"
  [ -d "$vproject_dir" ] && echo "vproject with name '$vproject_name' already exists, abort" && return
  # create dirs and symbolic links
  mkdir -p "$vproject_dir" \
    "$vproject_dir/Audio" \
    "$vproject_dir/Images/Screenshots" \
    "$vproject_dir/Text" \
    "$vproject_dir/Videos"
  touch "$vproject_dir/Text/Description.md"

  cd "$vproject_dir"
  echo "video project created at \"$vproject_dir\""
}

# Command to create a new project e.g. Nanotechnology.
project() {
  [ -z "$1" ] || [ "$1" = "." ] || [ "$1" = ".." ] || [ "$1" = "/" ] && echo "Usage: project <PROJECT_NAME>" && return
  unset subproject_name
  project_name="$1"
  project_dir="$projects_dir/$project_name"
  [ -d "$project_dir" ] && echo "project with name '$project_name' already exists, abort" && return
  # create dirs and symbolic links
  mkdir "$project_dir"
  mkviddir4project "$project_name" # symlink to the newly created video dir for this project
  mkimgdir4project "$project_name" # symlink to the newly created images dir for this project
  mkdir "$project_dir/site"
  mkdir "$project_dir/doc"
  # create a markdown document with some boilerplate
  document_file="$project_dir/doc/$project_name.md"
  project_markdown_scaffold >>"$document_file"
  # open document with text editor
  cd "$project_dir"
  #"$text_app" "$document_file"
}

# Creates a directory with the name of a singular project in the videos directory.
# Example with default behavior:
# You create a new project 'Nanotechnology' which will create directory $HOME/Projects/Nanotechnology.
# mkviddir4project will create $HOME/Videos/Projects/Nanotechnology.
# mkviddir4project will also create a symbolic link $HOME/Projects/Nanotechnology/vid
# that points to $HOME/Videos/Projects/Nanotechnology.
mkviddir4project() {
  mkdir -p "$(realpath "$projects_videos_dir")/$project_name" 2>/dev/null
  ln -s "$(realpath "$projects_videos_dir")/$project_name" "$projects_dir/$project_name/vid"
}

# See mkviddir4project.
mkimgdir4project() {
  mkdir -p "$(realpath "$projects_images_dir")/$project_name" 2>/dev/null
  ln -s "$(realpath "$projects_images_dir")/$project_name" "$projects_dir/$project_name/img"
}

# Command to create a new subproject e.g. Nanotechnology/Graphene.
subproject() { # create a new project in dir /data/projects/wickedtruths.org
  [ -z "$1" ] || [ "$1" = "." ] || [ "$1" = ".." ] || [ "$1" = "/" ] && echo "usage subproject <PROJECT_NAME> <SUBPROJECT_NAME>" && return
  [ -z "$2" ] || [ "$2" = "." ] || [ "$2" = ".." ] || [ "$2" = "/" ] && echo "usage subproject <PROJECT_NAME> <SUBPROJECT_NAME>" && return
  project_name="$1"
  project_dir="$projects_dir/$project_name"
  subproject_name="$2"
  subproject_dir="$project_dir/$subproject_name"
  [ ! -d "$project_dir" ] && echo "project '$project_dir' does not exist" &&
    echo "will create '$subproject_dir' and parent dir in 4 seconds" &&
    echo "press CTRL-C if you want to abort" && sleep 4

  # create dirs and symbolic links
  mkdir -p "$subproject_dir"
  mkviddir4subproject "$project_name" "$subproject_name" # symlink to the newly created video dir for this project
  mkimgdir4subproject "$project_name" "$subproject_name" # symlink to the newly created images dir for this project
  mkdir -p "$subproject_dir/site"
  mkdir -p "$subproject_dir/doc"
  # create a markdown document with some boilerplate
  document_file="$subproject_dir/doc/$subproject_name.md"
  project_markdown_scaffold >>"$document_file"
  # open document with text editor
  cd "$subproject_dir"
}

# See mkviddir4project.
mkviddir4subproject() {
  mkdir -p "$(realpath "$projects_videos_dir")/$project_name/$subproject_name" 2>/dev/null
  ln -s "$(realpath "$projects_videos_dir")/$project_name/$subproject_name" \
    "$(realpath "$projects_dir")/$project_name/$subproject_name/vid"
}

# See mkviddir4project.
mkimgdir4subproject() {
  mkdir -p "$(realpath "$projects_images_dir")/$project_name/$subproject_name" 2>/dev/null
  ln -s "$(realpath "$projects_images_dir")/$project_name/$subproject_name" \
    "$(realpath "$projects_dir")/$project_name/$subproject_name/img"
}

add2project() {
  [ "-h" = "$1" ] || [ "--help" = "$1" ] &&
    echo -e "Usage: add2project" &&
    echo -e "Usage: add2project <VIDEO_FILE>" &&
    echo -e "Usage: add2project <PROJECT_RELATIVE_PATH>" &&
    echo -e "Usage: add2project <VIDEO_FILE> <PROJECT_RELATIVE_PATH>" &&
    echo -e " Info: Creates a symbolic link that points to a video file in VidHop, inside the /vid directory of a given project." &&
    echo -e "       Running 'add2project' without arguments uses the video file of the last video download, and the project of the previous 'add2project' run." &&
    echo -e "       Similar to running 'add2project' without arguments, using one argument will check for values from the previous run." &&
    echo -e "       <PROJECT_RELATIVE_PATH> should NOT include the /vid segment at the end." && return

  [ -z "$1" ] && [ -z "$project_dir" ] && echo -e "I don't know which project you want to add the video to.\nTry 'add2project <PROJECT_RELATIVE_PATH>'" && return
  [ -z "$1" ] && [ -z "$media_file" ] && echo -e "I don't know which video you'd like to add.\nTry downloading a video first with 'dlv', or use 'add2project <VIDEO_FILE>." && return
  file="$media_file"

  # TODO: use fvidf to obtain one result and populate $file with it, otherwise abort
  if [ $# = 1 ]; then
    [ -f "$1" ] && ! [ -d "$project_dir" ] && echo "I have a file, but no project directory, abort" && return
    [ -d "$projects_dir/$1" ] && ! [ -f "$file" ] && echo "I have a project directory, but no file, abort" && return
    [ -f "$1" ] && [ -d "$project_dir" ] && file="$1"
    [ -d "$projects_dir/$1" ] && [ -f "$file" ] && project_dir="$projects_dir/$1"
  fi

  if [ $# = 2 ]; then
    file="$(realpath "$1")"
    project_rel_path="$2"
    project_dir="$projects_dir/$project_rel_path"
    ! [ -f "$file" ] && echo "not a file '$file', <VIDEO_FILE> has to match an existing video file, abort" && return
    ! [ -d "$project_dir" ] && echo -e "not a directory '$project_dir'\n<PROJECT_RELATIVE_PATH> has to match a project in your projects directory, abort" && return
  fi

  link_path="$project_dir/vid/$(basename "$file")"
  ln -s "$file" "$link_path"

  [ $? = 1 ] && echo "failed to create link from '$file' to '$link_path'" && return
  echo -e "  video file: '$file'"
  echo -e "project link: '$link_path'"
  unset project_rel_path file
}

mv2project() {
  [ "-h" = "$1" ] || [ "--help" = "$1" ] &&
    echo -e "Usage: mv2project" &&
    echo -e "Usage: mv2project <VIDEO_FILE>" &&
    echo -e "Usage: mv2project <PROJECT_RELATIVE_PATH>" &&
    echo -e "Usage: mv2project <VIDEO_FILE> <PROJECT_RELATIVE_PATH>" &&
    echo -e " Info: Creates a symbolic link that points to a video file in VidHop, inside the /vid directory of a given project." &&
    echo -e "       Running 'mv2project' without arguments uses the video file of the last video download, and the project of the previous 'mv2project' run." &&
    echo -e "       Similar to running 'mv2project' without arguments, using one argument will check for values from the previous run." &&
    echo -e "       <PROJECT_RELATIVE_PATH> should NOT include the /vid segment at the end." && return

  [ -z "$1" ] && [ -z "$project_dir" ] && echo -e "I don't know which project you want to add the video to.\nTry 'mv2project <PROJECT_RELATIVE_PATH>'" && return
  [ -z "$1" ] && [ -z "$media_file" ] && echo -e "I don't know which video you'd like to add.\nTry downloading a video first with 'dlv', or use 'mv2project <VIDEO_FILE>." && return
  file="$media_file"

  # TODO: use fvidf to obtain one result and populate $file with it, otherwise abort
  if [ $# = 1 ]; then
    [ -f "$1" ] && ! [ -d "$project_dir" ] && echo "I have a file, but no project directory, abort" && return
    [ -d "$projects_dir/$1" ] && ! [ -f "$file" ] && echo "I have a project directory, but no file, abort" && return
    [ -f "$1" ] && [ -d "$project_dir" ] && file="$1"
    [ -d "$projects_dir/$1" ] && [ -f "$file" ] && project_dir="$projects_dir/$1"
  fi

  if [ $# = 2 ]; then
    file="$(realpath "$1")"
    project_rel_path="$2"
    project_dir="$projects_dir/$project_rel_path"
    ! [ -f "$file" ] && echo "not a file '$file', <VIDEO_FILE> has to match an existing video file, abort" && return
    ! [ -d "$project_dir" ] && echo -e "not a directory '$project_dir'\n<PROJECT_RELATIVE_PATH> has to match a project in your projects directory, abort" && return
  fi

  dest_path="$project_dir/vid/$(basename "$file")"
  mv "$file" "$dest_path"
  [ $? = 1 ] && echo "failed to move '$file' to '$dest_path'" && return
  echo -e "moved: '$file'"
  echo -e "   to: '$dest_path'"
  unset project_rel_path file
}

# Create a symbolic link to a video file (arg) in the videos directory of a project.
# Example: linkvideo4project "$shared/Movies/VidHop/videos/youtube.com/DNA self-assembly.mp4" "Nanotechnology"
# Result: Symbolic link "$shared/Movies/Projects/Nanotechnology/DNA self-assembly.mp4"
#         points to "$shared/Movies/VidHop/videos/youtube.com/DNA self-assembly.mp4".
linkvideo4project() {
  [ -z "$1" ] && echo -e "Usage: linkvideo4project <VIDEO_FILE> <PROJECT_NAME>\nnote: <PROJECT_NAME> is case sensitive" && return
  unset file search_text error
  [ $# = 1 ] && file="$media_file" && project_name="$1"
  [ $# = 2 ] && [ -f "$1" ] && file="$(realpath "$1")" && project_name="$2"
  [ $# = 2 ] && [ ! -f "$1" ] && search_text="$1" && project_name="$2"

  [ -n "$search_text" ] && file="$(find_one_video "$search_text")" && error=$?
  [ "$error" = 1 ] && echo -e "found nothing for '$search_text'" && return
  [ "$error" = 2 ] && echo -e "found multiple videos instead of only one:\n$result" && return

  project_dir="$projects_dir/$project_name"
  [ ! -d "$project_dir" ] && echo "could not find directory $project_dir" && return

  link_path="$project_dir/vid/$(basename "$file")"
  ln -s "$file" "$link_path"
  [ $? = 1 ] && echo "failed to create link from '$file' to '$link_path'" && return
  echo -e "created link at:\n\"$link_path\"\nwhich points to file:\n\"$file\""
  unset file search_text
}

# Creates symlinks from fvidf results in the project /vid directory, more precisely in,
# <PROJECT_NAME/vid/<SEARCH_TEXT>.
linkvideos4project() {
  [ -z "$1" ] && echo "Usage: linkvideos4project <SEARCH_TEXT> <PROJECT_NAME>" &&
    echo " Info: creates symbolic links in <PROJECT_NAME>/vid/<SEARCH_TEXT> for all search results that match <SEARCH_TEXT>" && return
  search_text="$1"
  project_dir="$projects_dir/$2"
  [ ! -d "$project_dir" ] && echo "project directory '$project_dir' does not exist, abort" && return

  if [ "$(basename "$project_dir")" = "$search_text" ]; then dest_dir="$project_dir/vid"; else dest_dir="$project_dir/vid/$search_text"; fi

  unset result
  found_something="false"
  searchable_text="$(enhance_searchability "$search_text")"
  result_vids=$(find "$vids_dir" -not -path "*.srt" -type f -iname "*$searchable_text*") # sed adds quotes for filenames with spaces
  result_channels=$(find "$channels_dir" -not -path "*.srt" -type f -iname "*$searchable_text*")
  result_podcasts=$(find "$podcasts_dir" -not -path "*.srt" -type f -iname "*$searchable_text*")
  [ "$(wc -w <<<"$result_podcasts")" -gt 0 ] && result+="$result_podcasts\n" && found_something="true"
  [ "$(wc -w <<<"$result_channels")" -gt 0 ] && result+="$result_channels\n" && found_something="true"
  [ "$(wc -w <<<"$result_vids")" -gt 0 ] && result+="$result_vids\n" && found_something="true"
  [ "$found_something" = "false" ] && echo "found nothing" && return

  echo "Found $(wc -l <<<"$result") video files!" && sleep 1
  echo -e "${GREEN}$result${NC}" && clear_last_line

  echo "Creating links to video files in '$dest_dir'..."
  mkdir -p "$dest_dir"
  cd "$dest_dir"
  list_md="$dest_dir/$search_text.md"
  list_txt="$dest_dir/$search_text.txt"
  [ -f "$list_md" ] && rm "$list_md"
  [ -f "$list_txt" ] && rm "$list_txt"

  while read -r file; do
    [ -z "$file" ] && continue
    if [ -f "$file" ]; then
      # create link
      ln -s "$file" "$(basename "$file")" 2>/dev/null
      # write title & link to file
#      metadata="$(media_file2metadata_path "$file")"
#      if [ -f "$metadata" ]; then
#        title="$(jq '.title' "$metadata" | remove_leading_trailing_double_quotes)"
#        url="$(jq '.webpage_url' "$metadata" | remove_leading_trailing_double_quotes)"
#        channel_name="$(channel_name_from_json_file "$metadata" | remove_leading_trailing_double_quotes)"
#        channel_title_url_item_md >>"$list_md"
#        title_url_txt >>"$list_txt"
#      fi
    else
      echo "file error for '$file'"
    fi
  done < <(echo -e "$result")
  echo "Done creating links to video files in '$dest_dir'."
}

fvidf4project() {
  [ -z "$1" ] && echo "Usage: fvidf4project <SEARCH_TEXT> <PROJECT_NAME>" &&
    echo " Info: creates symbolic links in <PROJECT_NAME>/vid/<SEARCH_TEXT> for all search results that match <SEARCH_TEXT>" && return
  linkvideos4project "$@"
}

renlink+source() {
  [ ! $# = 2 ] && echo "Usage: renlink+source <LINK_PATH> <NEW_NAME>" && return
  old_video_link="$1"
  old_video_file="$(realpath "$old_video_link")"
  old_name="$(strip_extension "$(basename "$old_video_file")")"
  new_name="$2"
  [ ! -L "$old_video_link" ] && echo "not a link: '$old_video_link'" && return
  [ ! -f "$old_video_file" ] && echo "not a file: '$old_video_file'" && return

  renvid "$old_name" "$new_name"
  [ $? = 1 ] && return

  ext="$(get_extension "$old_video_file")"
  new_video_file="$(dirname "$old_video_file")/$new_name.$ext"
  new_video_link="$(dirname "$old_video_link")/$new_name.$ext"
  ln -s "$new_video_file" "$new_video_link"
  [ $? = 0 ] && rm "$old_video_link" && echo "renamed the video file and created a new link"
}

# When you have a directory with symbolic links that point to VidHop video files,
# this function will search for the metadata for each video in the given directory (else $PWD),
# and write a text file containing the title, URL and channel for each video.
#
# input: <dir>
# output: <dir>/links.txt, <dir>/links.md
videos2links() {
  links_dir="$PWD"
  [ -d "$1" ] && links_dir="$1"
#  if [ -d "$1" ]; then links_dir="$1"; else echo "no directory provided, using current working directory" && echo; fi
  [ ! -d "$links_dir" ] && echo "path '$links_dir' is not a directory" && return
  unset summary_txt errors items

  while read -r media_file; do
    title="$(strip_extension "$(basename "$media_file")")"

    json_file="$(media_file2metadata_path "$media_file")"
    if [ -f "$json_file" ]; then
      json="$(jq . "$json_file")"
      channel_name="$(channel_name_from_obj)"
      upload_date="$(jq '.upload_date' <<<"$json" | tr -d '"')"
      url="$(jq .webpage_url <<<"$json" | remove_leading_trailing_double_quotes)"
      item="$(echo -e "${title}\n${url}\n${channel_name}, ${upload_date}\n")"
      summary_txt+="$item\n\n"
      items+="$item\n\n"
    else
      errors+="$(echo -e "\n${media_file}")"
    fi
#    item="$(echo -e "${channel_name} > ${title}\n${url}\n")"
#    unset title url channel_name item
  done < <(find -L "$links_dir" -maxdepth 1 -type f ! -name '*.txt' ! -name '*.md' -exec realpath {} \;)

  echo -e "$items"
  [ -n "$errors" ] && echo -e "Errors:\n$errors"

  echo -e "$summary_txt" >"$links_dir/links.txt"
  [ -n "$errors" ] && echo -e "Errors:\n$errors" >>"$links_dir/links.txt"
}

videos2links-wp() {
  links_dir="$PWD"
  [ -d "$1" ] && links_dir="$1"
#  if [ -d "$1" ]; then links_dir="$1"; else echo "no directory provided, using current working directory" && echo; fi
  [ ! -d "$links_dir" ] && echo "path '$links_dir' is not a directory" && return
  unset items errors

  while read -r media_file; do
    title="$(strip_extension "$(basename "$media_file")")"

    json_file="$(media_file2metadata_path "$media_file")"
    if [ -f "$json_file" ]; then
      json="$(jq . "$json_file")"
      channel_name="$(channel_name_from_obj)"
      upload_date="$(jq '.upload_date' <<<"$json" | tr -d '"')"
      url="$(jq .webpage_url <<<"$json" | remove_leading_trailing_double_quotes)"
      item="$(wp-list-item "$(wp-href "$url" "$title")<br>${channel_name}, ${upload_date}")"
      items+="$item\n\n"
    else
      errors+="$(echo -e "\n${media_file}")"
    fi
#    item="$(echo -e "${channel_name} > ${title}\n${url}\n")"
#    unset title url channel_name item
  done < <(find -L "$links_dir" -maxdepth 1 -type f ! -name '*.txt' ! -name '*.md' -exec realpath {} \;)

  echo -e "$(wp-list "$items")"
  [ -n "$errors" ] && echo -e "\n\nErrors:\n$errors"
  # Write to files.
  echo -e "$(wp-list "$items")" >"$links_dir/links-wp.txt"
  [ -n "$errors" ] && echo -e "\n\nErrors:\n$errors" >>"$links_dir/links-wp.txt"
}

channel_title_url_item_md() {
  if [ -n "$channel_name" ]; then
    echo -e "- [$channel_name - $title]($url)"
  else
    echo -e "- [$title]($url)"
  fi
}

channel_title_url_item_txt() {
  unset summary_item
  [ -n "$channel_name" ] && summary_item+="$channel_name - "
  [ -n "$title" ] && summary_item+="$title\n"
  [ -n "$url" ] && summary_item+="$url\n\n"
  echo -e "$summary_item"
}

channel_title_url_item_terminal() {
  [ -n "$channel_name" ] && summary_item+="$channel_name - "
  [ -n "$title" ] && summary_item+="$title\n"
  [ -n "$url" ] && summary_item+="${GREEN}${url}${NC}\n\n"
  echo "$summary_item"
}

title_url_txt() {
  echo -e "$title\n$url\n"
}

# Write project: Opens the text document of a project at doc/<PROJECT_NAME>.md with the default $text_app, to start writing.
wproj() {
  [ -z "$1" ] && [ -n "$document_file" ] && "$text_app" "$document_file" && return
  [ -z "$1" ] && echo -e "Usage: wproj <PROJECT_NAME_CASE_SENSITIVE>" && return
  project_name="$1"
  subproject_name="$2"
  if [ -z "$subproject_name" ]; then
    "$text_app" "$projects_dir/$project_name/doc/$project_name.md" &
  else
    "$text_app" "$projects_dir/$project_name/$subproject_name/doc/$subproject_name.md" &
  fi
}

writeproject() {
  wproj "$@"
}

lsprojects() {
  [ "$1" = -h ] && echo "Usage: lsprojects [<SEARCH_TEXT>]" && return
  [ -n "$1" ] && find "$projects_dir" -maxdepth 1 -type d -iname "*$1*" -exec basename {} \; | sort && return
  find "$projects_dir" -maxdepth 1 -type d -exec basename {} \; | sort
}

fproj() {
  [ -z "$1" ] && echo -e "Usage: fproj <SEARCH_TEXT> <PROJECT_NAME_CASE_SENSITIVE>" && return
  unset result
  search_text="$1"
  if [ -z "$2" ]; then search_dir="."; else search_dir="$projects_dir/$2"; fi
  [ ! -d "$search_dir" ] && echo "could not find directory $search_dir" && return
  # Display with relative paths.
  prev="$PWD"
  [[ "$PWD" != *"$projects_dir"* ]] && cd "$projects_dir"
  result="$(find -L "$search_dir" -type f \
    -not -path "*.js" \
    -not -path "*.css" \
    -not -path "*_files/*" \
    -iname "*$search_text*" -exec realpath {} \; 2>/dev/null | sort | uniq | prefix_suffix_with_double_quotes)"
  echo "${GREEN}${result}${NC}"
}

cdproject() {
  [ -z "$1" ] && echo "Usage: cdproj <PROJECT_REL_PATH>" && return
  project_dir="$projects_dir/$1"
  ! [ -d "$project_dir" ] && echo -e "not a directory '$project_dir', abort" && return
  cd "$project_dir"
}

renproject() {
  [ -z "$1" ] || [ -z "$2" ] && echo "Usage: renproject <PROJECT_NAME> <NEW_PROJECT_NAME>" && return
  project_name="$1"
  project_dir="$projects_dir/$project_name"
  project_vids_dir="$projects_videos_dir/$project_name"
  project_imgs_dir="$projects_images_dir/$project_name"
  new_project_name="$2"
  new_project_dir="$projects_dir/$new_project_name"
  new_project_vids_dir="$projects_videos_dir/$new_project_name"
  new_project_imgs_dir="$projects_images_dir/$new_project_name"
  [ ! -d "$project_dir" ] && echo "found no project with name '$project_name', abort" && return
  # rename main directories
  rm "$project_dir/vid"
  rm "$project_dir/img"
  mv "$project_dir/doc/$project_name.md" "$project_dir/doc/$new_project_name.md"
  mv "$project_dir" "$new_project_dir"
  mv "$project_vids_dir" "$new_project_vids_dir"
  mv "$project_imgs_dir" "$new_project_imgs_dir"
  # recreate symbolic links for vid & img
  ln -s "$(realpath "$new_project_vids_dir")" "$new_project_dir/vid"
  ln -s "$(realpath "$new_project_imgs_dir")" "$new_project_dir/img"
  echo "renamed project from '$project_name' to '$new_project_name'"
}

rensubproject() {
  [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ] &&
    echo "Usage: rensubproject <PROJECT_NAME> <SUB_PROJECT_NAME> <NEW_SUB_PROJECT_NAME>" && return
  project_name="$1"
  sub_project_name="$2"
  new_sub_project_name="$3"

  sub_project_dir="$projects_dir/$project_name/$sub_project_name"
  sub_project_vids_dir="$projects_videos_dir/$project_name/$sub_project_name"
  sub_project_imgs_dir="$projects_images_dir/$project_name/$sub_project_name"

  new_sub_project_dir="$projects_dir/$project_name/$new_sub_project_name"
  new_sub_project_vids_dir="$projects_videos_dir/$project_name/$new_sub_project_name"
  new_sub_project_imgs_dir="$projects_images_dir/$project_name/$new_sub_project_name"
  [ ! -d "$sub_project_dir" ] && echo "found no subproject '$sub_project_name' in project '$project_name', abort" && return

  # rename main directories
  rm "$sub_project_dir/vid"
  rm "$sub_project_dir/img"
  mv "$sub_project_dir/doc/$sub_project_name.md" "$sub_project_dir/doc/$new_sub_project_name.md"
  mv "$sub_project_dir" "$new_sub_project_dir"
  mv "$sub_project_vids_dir" "$new_sub_project_vids_dir"
  mv "$sub_project_imgs_dir" "$new_sub_project_imgs_dir"
  # recreate symbolic links for vid & img
  ln -s "$(realpath "$new_sub_project_vids_dir")" "$new_sub_project_dir/vid"
  ln -s "$(realpath "$new_sub_project_imgs_dir")" "$new_sub_project_dir/img"

  echo "renamed subproject from '$sub_project_name' to '$new_sub_project_name'"
}

# Remove a project.
rmproject() {
  [ -z "$1" ] && echo "Usage: rmproject <PARTIAL_PROJECT_NAME>" && return
  result="$(find "$projects_dir" -maxdepth 1 -type d -name "$1")"
  [ "$(wc -w <<<"$result")" -eq 0 ] && echo -e "found no match for '$1', abort" && return 1
  [ "$(wc -l <<<"$result")" -gt 1 ] && echo -e "found multiple possibilities for '$1', abort\n$result" && return 2

  project_dir="$result"
  project_name="$(basename "$project_dir")"
  project_vids_dir="$projects_videos_dir/$project_name"
  project_imgs_dir="$projects_images_dir/$project_name"

  echo "The following directories will be removed for project '$project_name':"
  echo "$project_dir"
  echo "$project_vids_dir"
  echo "$project_imgs_dir"

  unset answer keep
  echo -e "Y(es) = Remove All\nK(eep) = Remove project dir but Keep Videos & images\nN(o) = No, abort"
  echo -n "Remove project? Y/k/n: " && read -r answer
  answer=$(echo "$answer" | tr '[:upper:]' '[:lower:]')
  [ -z "$answer" ] || [ "$answer" = "y" ] && keep=false
  [ "$answer" = "k" ] && keep=true
  [ "$answer" = "n" ] && return

  [ $keep = false ] && # remove videos & images directories
    echo "removing videos dir at $project_vids_dir" && rm -r "$project_vids_dir" &&
    echo "removing images dir at $project_imgs_dir" && rm -r "$project_imgs_dir"
  # remove videos & images directories for project if they are empty
  [ $keep = true ] && [ -z "$(ls -A "$project_vids_dir" 2>/dev/null)" ] &&
    echo "removing videos dir because it's empty at $project_vids_dir" &&
    rmdir "$project_vids_dir"
  [ $keep = true ] && [ -z "$(ls -A "$project_imgs_dir" 2>/dev/null)" ] &&
    echo "removing images dir because it's empty at $project_imgs_dir" &&
    rmdir "$project_imgs_dir"

  echo "removing project '$project_dir'"
  rm -r "$project_dir"

  echo "removed project '$project_name'"
}

# Remove a subproject.
rmsubproject() {
  [ -z "$1" ] || [ -z "$2" ] && echo "Usage: rmsubproject <PROJECT_NAME> <SUB_PROJECT_NAME>" && return
  project_name="$1"
  sub_project_name="$2"
  #  project_dir="$projects_dir/$project_name"
  #  project_vids_dir="$projects_videos_dir/$project_name"
  #  project_imgs_dir="$projects_images_dir/$project_name"
  sub_project_dir="$projects_dir/$project_name/$sub_project_name"
  sub_project_vids_dir="$projects_videos_dir/$project_name/$sub_project_name"
  sub_project_imgs_dir="$projects_images_dir/$project_name/$sub_project_name"
  [ ! -d "$sub_project_dir" ] && echo "found no project with name '$project_name', abort" && return

  echo "The following directories will be removed for project '$project_name':"
  echo "$sub_project_dir"
  echo "$sub_project_vids_dir"
  echo "$sub_project_imgs_dir"

  unset answer keep
  echo -e "Y(es) = Remove All\nK(eep) = Remove project dir but Keep Videos & images\nN(o) = No, abort"
  echo -n "Remove project? Y/k/n: " && read -r answer
  answer=$(echo "$answer" | tr '[:upper:]' '[:lower:]')
  [ -z "$answer" ] || [ "$answer" = "y" ] && keep=false
  [ "$answer" = "k" ] && keep=true
  [ "$answer" = "n" ] && return

  [ $keep = false ] && # remove videos & images directories
    {
      echo "removing videos dir at $sub_project_vids_dir" && rm -r "$sub_project_vids_dir"
      echo "removing images dir at $sub_project_imgs_dir" && rm -r "$sub_project_imgs_dir"
    }
  # remove videos & images directories for project if they are empty
  [ $keep = true ] && [ -z "$(ls -A "$sub_project_vids_dir" 2>/dev/null)" ] &&
    {
      echo "removing videos dir because it's empty at $sub_project_vids_dir"
      rmdir "$sub_project_vids_dir"
    }
  [ $keep = true ] && [ -z "$(ls -A "$sub_project_imgs_dir" 2>/dev/null)" ] &&
    {
      echo "removing images dir because it's empty at $sub_project_imgs_dir" &&
        rmdir "$sub_project_imgs_dir"
    }

  echo "removing project '$sub_project_dir'"
  rm -r "$sub_project_dir"
  echo "removed project '$sub_project_name'"
}

sendproject() { # sync docs only to phone
  project_name="$1"
  project_dir="$projects_dir/$project_name"
  [ ! -d "$project_dir" ] && echo "directory does not exist: $project_dir" && return
  echo -e ">> sending project..."
  rsync -Pauv -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
    --exclude=".git/" \
    --exclude=".gitignore" \
    --exclude=".idea/" \
    --exclude="**/site/" \
    --include="*/" \
    --include="*.md" \
    --exclude="*" \
    "$project_dir" "$USER_PHONE@$IP_PHONE:$shared/Projects"
}

# Solves issues with viewing offline webpages, saved with 'Save As' in the browser (Firefox).
rmjs() {
  dir="$1"
  [ -z "$dir" ] && dir=$PWD
  ! [ -d "$dir" ] && echo "not a directory '$dir', abort" && return
  find "$dir" -iname "*.js"

  unset answer
  echo -n "Remove these files? Y/n: " && read -r answer
  answer=$(echo "$answer" | tr '[:upper:]' '[:lower:]')
  [ -z "$answer" ] || [ "$answer" = "y" ] &&
    find "$dir" -iname "*.js" -exec rm {} \; &&
    echo "files removed"
}

cleanproj() {
  find "$projects_dir" -empty -type d -delete
}

# Read PDF file.
pdf() {
  [ -z "$1" ] &&
    echo " Usage: pdf <PDF_FILE>" &&
    echo "        pdf <SEARCH_TEXT>" &&
    echo "  Info: Read a PDF file with the default PDF reader app defined in config.ini." &&
    echo "        When <SEARCH_TEXT> is provided, pdf() will look in \$projects_dir for a match and open it." && return

  search_text="$1"
  [ -f "$1" ] && "$pdf_reader_app" "$1" &

  files="$(find "$projects_dir" -iname "*$1*pdf")"
  count=$(wc -l <<<"$files")
  [ "$files" = "" ] && count=0
  [ "$count" -eq 0 ] && echo "found nothing for '$search_text'" && unset files && return
  [ "$count" -gt 1 ] &&
    echo -e "pdf requires 1 file to read, but found $count\n$files\nyou can specify your search term further" &&
    unset files && return
  "$pdf_reader_app" "$files"
}

wlink() {
  [ -z "$1" ] &&
    echo " Usage: wlink <URL> [<NAME>|<DIRECTORY>] [NAME]" &&
    echo "  Info: Create a shortcut to a web page." && return

  wlink_url="$1"
  wlink_url="$(echo "$wlink_url" | sed 's/\\//g')" # remove backslashes
  sanitized_url="$(url_to_filename "$wlink_url")"
  # Remove https://www
  sanitized_url="${sanitized_url#https_--www_}"
  sanitized_url="${sanitized_url#https_--}"
  # Remove http://www
  sanitized_url="${sanitized_url#http_--www_}"
  sanitized_url="${sanitized_url#http_--}"

  wlink_dir="$(pwd)"
  wlink_name="${sanitized_url}"

  if [ -n "$2" ]; then
    [ -d "$2" ] && wlink_dir="$(realpath "$2")"
    ! [ -d "$2" ] && wlink_name="$2"
  fi
  if [ -n "$3" ]; then
    ! [ -d "$2" ] && echo "not a directory: '$2', abort'" && return
    wlink_dir="$(realpath "$2")"
    wlink_name="$3"
  fi
  wlink_file="${wlink_dir}/${wlink_name}.desktop"

  {
    echo "[Desktop Entry]"
    echo "Encoding=UTF-8"
    echo "Name=$wlink_name"
    echo "Type=Link"
    echo "URL=$wlink_url"
    echo "Icon=text-html"
  } >>"$wlink_file"

  echo "created shortcut for url:"
  echo "${wlink_url}"
  echo "at:"
  echo "${wlink_file}"
}

wlinks() {
  while read -r url; do
    wlink "$url"
  done <<<"$1"
}
