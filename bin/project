#!/bin/bash
# While reading the code, differentiate between "projects" in plural, which is the directory
# that holds all individual projects which are referred to in singular as "project".

project_help() {
  echo " Title: project"
  echo " Description: Create projects scaffolding and link VidHop video files."
  echo " Commands:"
  echo "    project <PROJECT_NAME> => Create new project with <PROJECT_NAME> in \$projects_dir."
  echo "    subproject <PROJECT_NAME> <SUBPROJECT_NAME>      => Create new subproject in <PROJECT_NAME> as <SUBPROJECT_NAME>."
  echo "    linkvideo4project <VIDEO_FILE> <PROJECT_NAME>      => Creates a symbolic link of given <VIDEO_FILE> in project with name <PROJECT_NAME>."
  echo "    linkvideos4project <SEARCH_TEXT> <PROJECT_NAME> => Creates symbolic links in <PROJECT_NAME> for all video files found by fvidf <SEARCH_TEXT> (happens in the background)."
  echo "    fproj <SEARCH_TEXT>      => Find files whose name match <SEARCH_TEXT> in all projects."
  echo "    absfproj <SEARCH_TEXT>   => Identical to fproj but results are displayed as absolute paths."
  echo "    rmproject <PROJECT_NAME> => Remove the project with as name <PROJECT_NAME>."
}

project_markdown_scaffold() {
  cat <<EOF
# $project_name

## Videos

[]()

[]()

## Websites

[]()

[]()

## Studies & Books

[]()

[]()

## Glossary

| Term | Definition |
| ---- | ---------- |
|      |            |
EOF
}

# Command to create a new project e.g. Nanotechnology.
project() {
  [ -z "$1" ] || [ "$1" = "." ] || [ "$1" = ".." ] || [ "$1" = "/" ] && echo "usage: project <PROJECT_NAME>" && return
  project_name="$1"
  project_dir="$projects_dir/$project_name"
  [ -d "$project_dir" ] && echo "project with name '$project_name' already exists, abort" && return
  # create dirs and symbolic links
  mkdir "$project_dir"
  mkviddir4project "$project_name" # symlink to the newly created video dir for this project
  mkimgdir4project "$project_name" # symlink to the newly created images dir for this project
  mkdir "$project_dir/site"
  mkdir "$project_dir/doc"
  # create a markdown document with some boilerplate
  document_file="$project_dir/doc/$project_name.md"
  project_markdown_scaffold >>"$document_file"
  # open document with text editor
  cd "$project_dir"
  "$text_app" "$document_file"
}

# Creates a directory with the name of a singular project in the videos directory.
# Example with default behavior:
# You create a new project 'Nanotechnology' which will create directory $shared/Projects/Nanotechnology.
# mkviddir4project will create $shared/Movies/Projects/Nanotechnology.
# mkviddir4project will also create a symbolic link $shared/Projects/Nanotechnology/vid
# that points to $shared/Movies/Projects/Nanotechnology.
mkviddir4project() {
  mkdir -p "$(realpath "$projects_videos_dir")/$project_name" 2>/dev/null
  ln -s "$(realpath "$projects_videos_dir")/$project_name" "$projects_dir/$project_name/vid"
}

# See mkviddir4project.
mkimgdir4project() {
  mkdir -p "$(realpath "$projects_images_dir")/$project_name" 2>/dev/null
  ln -s "$(realpath "$projects_images_dir")/$project_name" "$projects_dir/$project_name/img"
}

# Command to create a new subproject e.g. Nanotechnology/Graphene.
subproject() { # create a new project in dir /data/projects/wickedtruths.org
  [ -z "$1" ] || [ "$1" = "." ] || [ "$1" = ".." ] || [ "$1" = "/" ] && echo "usage subproject <PROJECT_NAME> <SUBPROJECT_NAME>" && return
  [ -z "$2" ] || [ "$2" = "." ] || [ "$2" = ".." ] || [ "$2" = "/" ] && echo "usage subproject <PROJECT_NAME> <SUBPROJECT_NAME>" && return
  project_name="$1"
  project_dir="$projects_dir/$project_name"
  subproject_name="$2"
  subproject_dir="$project_dir/$subproject_name"
  [ ! -d "$project_dir" ] && echo "project '$project_dir' does not exist" &&
    echo "will create '$subproject_dir' and parent dir in 4 seconds" &&
    echo "press CTRL-C if you want to abort" && sleep 4

  # create dirs and symbolic links
  mkdir -p "$subproject_dir"
  mkviddir4subproject "$project_name" "$subproject_name" # symlink to the newly created video dir for this project
  mkimgdir4subproject "$project_name" "$subproject_name" # symlink to the newly created images dir for this project
  mkdir "$subproject_dir/site"
  mkdir "$subproject_dir/doc"
  # create a markdown document with some boilerplate
  document_file="$subproject_dir/doc/$subproject_name.md"
  project_markdown_scaffold >>"$document_file"
  # open document with text editor
  cd "$subproject_dir"
  "$text_app" "$document_file"
}

# See mkviddir4project.
mkviddir4subproject() {
  mkdir -p "$(realpath "$projects_videos_dir")/$project_name/$subproject_name" 2>/dev/null
  ln -s "$(realpath "$projects_videos_dir")/$project_name/$subproject_name" \
    "$(realpath "$projects_dir")/$project_name/$subproject_name/vid"
}

# See mkviddir4project.
mkimgdir4subproject() {
  mkdir -p "$(realpath "$projects_images_dir")/$project_name/$subproject_name" 2>/dev/null
  ln -s "$(realpath "$projects_images_dir")/$project_name/$subproject_name" \
    "$(realpath "$projects_dir")/$project_name/$subproject_name/img"
}

# Create a symbolic link to video file (arg) in the videos directory of a project.
# Example: linkvideo4project "$shared/Movies/VidHop/videos/youtube.com/DNA self-assembly.mp4" "Nanotechnology"
# Result: Symbolic link "$shared/Movies/Projects/Nanotechnology/DNA self-assembly.mp4"
#         points to "$shared/Movies/VidHop/videos/youtube.com/DNA self-assembly.mp4".
linkvideo4project() {
  [ -z "$1" ] && echo -e "usage: linkvideo4project <VIDEO_FILE> <PROJECT_NAME>\nnote: <PROJECT_NAME> is case sensitive" && return
  [ $# = 1 ] && file="$media_file" && project_name="$1"
  [ $# = 2 ] && [ -f "$1" ] && file="$(realpath "$1")" && project_name="$2"
  [ $# = 2 ] && [ ! -f "$1" ] && search_text="$1" && project_name="$2"

  [ -n "$search_text" ] && file="$(find_one_video "$search_text")"
  error=$?
  [ "$error" = 1 ] && echo -e "found nothing for '$search_text'" && return
  [ "$error" = 2 ] && echo -e "found multiple videos instead of only one:\n$result" && return

  project_dir="$projects_dir/$project_name"
  [ ! -d "$project_dir" ] && echo "could not find directory $project_dir" && return

  link_path="$project_dir/vid/$(basename "$file")"
  ln -s "$file" "$link_path"
  [ $? = 1 ] && echo "failed to create link from '$file' to '$link_path'" && return
  echo -e "created link at:\n\"$link_path\"\n which points to file:\n \"$file\""
  unset file search_text
}

# Creates symlinks from fvidf results in the project /vid directory, more precisely in,
# <PROJECT_NAME/vid/Video File Links/<SEARCH_TEXT>.
linkvideos4project() {
  [ -z "$1" ] && echo "usage: linkvideos4project <SEARCH_TEXT> <PROJECT_NAME>" &&
    echo " info: creates symbolic links in <PROJECT_NAME>/vid/<SEARCH_TEXT> for all search results that match <SEARCH_TEXT>" && return
  search_text="$1"
  project_dir="$projects_dir/$2"
  [ ! -d "$project_dir" ] && echo "project directory '$project_dir' does not exist, abort" && return
  dest_dir="$project_dir/vid/Video File Links/$search_text"

  unset result
  found_something="false"
  searchable_text="$(enhance_searchability "$search_text")"
  result_vids=$(find "$vids_dir" -not -path "*.srt" -type f -iname "*$searchable_text*") # sed adds quotes for filenames with spaces
  result_channels=$(find "$channels_dir" -not -path "*.srt" -type f -iname "*$searchable_text*")
  result_podcasts=$(find "$podcasts_dir" -not -path "*.srt" -type f -iname "*$searchable_text*")
  [ "$(wc -w <<<"$result_podcasts")" -gt 0 ] && result+="$result_podcasts\n" && found_something="true"
  [ "$(wc -w <<<"$result_channels")" -gt 0 ] && result+="$result_channels\n" && found_something="true"
  [ "$(wc -w <<<"$result_vids")" -gt 0 ] && result+="$result_vids\n" && found_something="true"
  [ "$found_something" = "false" ] && echo "found nothing" && return

  echo "Found $(wc -l <<<"$result") video files!" && sleep 1
  echo -e "${GREEN}$result${NC}" && clearLastLine

  echo "Creating links to video files in '$dest_dir'..."
  mkdir -p "$dest_dir"
  cd "$dest_dir"
  list_md="$dest_dir/$search_text.md"
  list_txt="$dest_dir/$search_text.txt"
  [ -f "$list_md" ] && rm "$list_md"
  [ -f "$list_txt" ] && rm "$list_txt"

  while read -r file; do
    [ -z "$file" ] && continue
    if [ -f "$file" ]; then
      # create link
      ln -s "$file" "$(basename "$file")" 2>/dev/null
      # write title & link to file
      metadata="$(media_file_to_metadata_path "$file")"
      if [ -f "$metadata" ]; then
        write_title_url_to_markdown_file
        write_title_url_to_txt_file
      fi
    else
      echo "file error for '$file'"
    fi
  done < <(echo -e "$result")
  echo "Done creating links to video files in '$dest_dir'."
}
# When you have a directory with symbolic links to VidHop video files,
# this function will search for the metadata for each video,
# and write a text file containing the title, URL, channel and channel URL, for each video,
# in the same directory provided as argument to the function.
videolinks2text() {
  [ -d "$1" ] && links_dir="$1"
  [ ! -d "$1" ] && [ -d "$projects_dir/$1/vid/Video File Links" ] && links_dir="$projects_dir/$1/vid/Video File Links"
  [ ! -d "$links_dir" ] && echo "path '$links_dir' is not a directory" && return

  unset summary
  while read -r media_file; do
    json_file="$(media_file_to_metadata_path "$media_file")" || continue
    if [ -f "$json_file" ]; then
      json="$(jq . "$json_file")"
      title="$(jq .title <<<"$json")"
      url="$(jq .webpage_url <<<"$json")"
      channel_name="$(channel_name_from_obj)"
      channel_url="$(channel_url)"
      [ -n "$title" ] && echo -e "${GREEN}$title${NC}" | tr -d '"' && summary+="$(echo "$title" | tr -d '"')\n"
      [ -n "$url" ] && echo -e "${GREEN}$url${NC}" | tr -d '"' && summary+="$(echo "$url" | tr -d '"')\n"
      [ -n "$channel_name" ] && echo -e "${GREEN}$channel_name${NC}" && summary+="$channel_name\n"
      [ -n "$channel_url" ] && echo -e "${GREEN}$channel_url${NC}" && summary+="$channel_url\n"
      echo && summary+="\n"
    else
      logInfo "not a valid metadata file '$json_file'"
    fi
  done < <(find -L "$links_dir" -xtype l -exec realpath {} \;)
  echo "$summary" >"$links_dir/links.txt"
}

fvidf4project() {
  [ -z "$1" ] && echo "usage: fvidf4project <SEARCH_TEXT> <PROJECT_NAME>" &&
    echo " info: creates symbolic links in <PROJECT_NAME>/vid/<SEARCH_TEXT> for all search results that match <SEARCH_TEXT>" && return
  linkvideos4project "$@"
}
write_title_url_to_markdown_file() {
  line="$(jq '"- [" + .title + "](" + .webpage_url + ")"' "$metadata" | remove_leading_trailing_double_quotes)"
  echo "$line" >>"$list_md"
}

write_title_url_to_txt_file() {
  title="$(jq '.title' "$metadata" | remove_leading_trailing_double_quotes)"
  webpage_url="$(jq '.webpage_url' "$metadata" | remove_leading_trailing_double_quotes)"
  echo -e "$title\n$webpage_url\n" >>"$list_txt"
}

# Find files in projects root directory (all projects).
fproj() {
  [ -z "$1" ] && echo -e "usage: fproj <SEARCH_TEXT> <PROJECT_NAME_CASE_SENSITIVE>" && return
  search_text="$1"
  project_dir="$projects_dir/$2"
  [ ! -d "$project_dir" ] && echo "could not find directory $project_dir" && return
  # Display with relative paths.
  pwd="$PWD"
  cd "$projects_dir"
  find -L . -type f -iname "*$search_text*" -printf '"%p"\n'
}

# Identical as fproj but returns absolute paths.
absfproj() {
  [ -z "$1" ] && echo -e "usage: fprojabs <SEARCH_TEXT> <PROJECT_NAME_CASE_SENSITIVE>" && return
  search_text="$1"
  project_dir="$projects_dir/$2"
  [ ! -d "$project_dir" ] && echo "could not find directory $project_dir" && return
  find -L "$project_dir" -type f -iname "*$search_text*" -printf '"%p"\n'
}

renproject() {
  [ -z "$1" ] || [ -z "$2" ] && echo "usage: renproject <PROJECT_NAME> <NEW_PROJECT_NAME>" && return
  project_name="$1"
  project_dir="$projects_dir/$project_name"
  project_vids_dir="$projects_videos_dir/$project_name"
  project_imgs_dir="$projects_images_dir/$project_name"
  new_project_name="$2"
  new_project_dir="$projects_dir/$new_project_name"
  new_project_vids_dir="$projects_videos_dir/$new_project_name"
  new_project_imgs_dir="$projects_images_dir/$new_project_name"
  [ ! -d "$project_dir" ] && echo "found no project with name '$project_name', abort" && return
  # rename main directories
  rm "$project_dir/vid"
  rm "$project_dir/img"
  mv "$project_dir/doc/$project_name.md" "$project_dir/doc/$new_project_name.md"
  mv "$project_dir" "$new_project_dir"
  mv "$project_vids_dir" "$new_project_vids_dir"
  mv "$project_imgs_dir" "$new_project_imgs_dir"
  # recreate symbolic links for vid & img
  ln -s "$(realpath "$new_project_vids_dir")" "$new_project_dir/vid"
  ln -s "$(realpath "$new_project_imgs_dir")" "$new_project_dir/img"
  echo "renamed project from '$project_name' to '$new_project_name'"
}

rensubproject() {
  [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ] &&
    echo "usage: rensubproject <PROJECT_NAME> <SUB_PROJECT_NAME> <NEW_SUB_PROJECT_NAME>" && return
  project_name="$1"
  sub_project_name="$2"
  new_sub_project_name="$3"
  sub_project_dir="$projects_dir/$project_name/$sub_project_name"
  sub_project_vids_dir="$projects_videos_dir/$project_name/$sub_project_name"
  sub_project_imgs_dir="$projects_images_dir/$project_name/$sub_project_name"
  new_sub_project_dir="$projects_dir/$project_name/$new_sub_project_name"
  new_sub_project_vids_dir="$projects_videos_dir/$project_name/$new_sub_project_name"
  new_sub_project_imgs_dir="$projects_images_dir/$project_name/$new_sub_project_name"
  [ ! -d "$sub_project_dir" ] && echo "found no subproject '$sub_project_name' in project '$project_name', abort" && return
  # rename main directories
  rm "$sub_project_dir/vid"
  rm "$sub_project_dir/img"
  mv "$sub_project_dir/doc/$sub_project_name.md" "$sub_project_dir/doc/$new_sub_project_name.md"
  mv "$sub_project_dir" "$new_sub_project_dir"
  mv "$sub_project_vids_dir" "$new_sub_project_vids_dir"
  mv "$sub_project_imgs_dir" "$new_sub_project_imgs_dir"
  # recreate symbolic links for vid & img
  ln -s "$(realpath "$sub_project_vids_dir")" "$new_sub_project_dir/vid"
  ln -s "$(realpath "$sub_project_imgs_dir")" "$new_sub_project_dir/img"
  echo "renamed subproject from '$sub_project_name' to '$new_sub_project_name'"
}

# Remove a project.
rmproject() {
  [ -z "$1" ] && echo "usage: rmproject <PARTIAL_PROJECT_NAME>" && return
  result="$(find "$projects_dir" -maxdepth 1 -type d -name "$1")"
  [ "$(wc -w <<<"$result")" -eq 0 ] && echo -e "found no match for '$1', abort" && return 1
  [ "$(wc -l <<<"$result")" -gt 1 ] && echo -e "found multiple possibilities for '$1', abort\n$result" && return 2

  project_dir="$result"
  project_name="$(basename "$project_dir")"
  project_vids_dir="$projects_videos_dir/$project_name"
  project_imgs_dir="$projects_images_dir/$project_name"

  echo "The following directories will be removed for project '$project_name':"
  echo "$project_dir"
  echo "$project_vids_dir"
  echo "$project_imgs_dir"

  unset answer keep
  echo -e "Y(es) = Remove All\nK(eep) = Remove project dir but Keep Videos & images\nN(o) = No, abort"
  echo -n "Remove project? Y/k/n: " && read -r answer
  answer=$(echo "$answer" | tr '[:upper:]' '[:lower:]')
  [ -z "$answer" ] || [ "$answer" = "y" ] && keep=false
  [ "$answer" = "k" ] && keep=true
  [ "$answer" = "n" ] && return

  [ $keep = false ] && # remove videos & images directories
    echo "removing videos dir at $project_vids_dir" && rm -r "$project_vids_dir" &&
    echo "removing images dir at $project_imgs_dir" && rm -r "$project_imgs_dir"
  # remove videos & images directories for project if they are empty
  [ $keep = true ] && [ -z "$(ls -A "$project_vids_dir" 2>/dev/null)" ] &&
    echo "removing videos dir because it's empty at $project_vids_dir" &&
    rmdir "$project_vids_dir"
  [ $keep = true ] && [ -z "$(ls -A "$project_imgs_dir" 2>/dev/null)" ] &&
    echo "removing images dir because it's empty at $project_imgs_dir" &&
    rmdir "$project_imgs_dir"

  echo "removing project '$project_dir'"
  rm -r "$project_dir"

  echo "removed project '$project_name'"
}

# Remove a subproject.
rmsubproject() {
  [ -z "$1" ] || [ -z "$2" ] && echo "usage: rmsubproject <PROJECT_NAME> <SUB_PROJECT_NAME>" && return
  project_name="$1"
  sub_project_name="$2"
  #  project_dir="$projects_dir/$project_name"
  #  project_vids_dir="$projects_videos_dir/$project_name"
  #  project_imgs_dir="$projects_images_dir/$project_name"
  sub_project_dir="$projects_dir/$project_name/$sub_project_name"
  sub_project_vids_dir="$projects_videos_dir/$project_name/$sub_project_name"
  sub_project_imgs_dir="$projects_images_dir/$project_name/$sub_project_name"
  [ ! -d "$sub_project_dir" ] && echo "found no project with name '$project_name', abort" && return

  echo "The following directories will be removed for project '$project_name':"
  echo "$sub_project_dir"
  echo "$sub_project_vids_dir"
  echo "$sub_project_imgs_dir"

  unset answer keep
  echo -e "Y(es) = Remove All\nK(eep) = Remove project dir but Keep Videos & images\nN(o) = No, abort"
  echo -n "Remove project? Y/k/n: " && read -r answer
  answer=$(echo "$answer" | tr '[:upper:]' '[:lower:]')
  [ -z "$answer" ] || [ "$answer" = "y" ] && keep=false
  [ "$answer" = "k" ] && keep=true
  [ "$answer" = "n" ] && return

  [ $keep = false ] && # remove videos & images directories
    {
      echo "removing videos dir at $sub_project_vids_dir" && rm -r "$sub_project_vids_dir"
      echo "removing images dir at $sub_project_imgs_dir" && rm -r "$sub_project_imgs_dir"
    }
  # remove videos & images directories for project if they are empty
  [ $keep = true ] && [ -z "$(ls -A "$sub_project_vids_dir" 2>/dev/null)" ] &&
    {
      echo "removing videos dir because it's empty at $sub_project_vids_dir"
      rmdir "$sub_project_vids_dir"
    }
  [ $keep = true ] && [ -z "$(ls -A "$sub_project_imgs_dir" 2>/dev/null)" ] &&
    {
      echo "removing images dir because it's empty at $sub_project_imgs_dir" &&
        rmdir "$sub_project_imgs_dir"
    }

  echo "removing project '$sub_project_dir'"
  rm -r "$sub_project_dir"
  echo "removed project '$sub_project_name'"
}

pdf() {
  [ ! -f "$1" ] && echo "not a file: '$1'" && return
  "$pdf_reader_app" "$1"
}
