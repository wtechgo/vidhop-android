#!/bin/bash

metadata_help() {
  echo " Title: metadata"
  echo " Description: Edit the metadata of downloads."
  echo " Commands:"
  echo "    metadata                     => show metadata of last download"
  echo "    metadata <FILE_ABS_PATH>     => show metadata for file with absolute path"
  echo "    setdescription <DESCRIPTION> => set a description in the metadata JSON file of the last download"
  echo "    setsummary <SUMMARY>         => set a summary in the metadata JSON file of the last download"
  echo "    setcategories <CATEGORIES>   => set categories in the metadata JSON file of the last download"
  echo "    settopics <TOPICS>           => set topics in the metadata JSON file of the last download"
  echo "    setspeakers <SPEAKERS>       => set speakers in the metadata JSON file of the last download"
  echo "    setcreators <CREATORS>       => set creators in the metadata JSON file of the last download"
  echo "    settimestamps <CREATORS>     => set timestamps in the metadata JSON file of the last download"
  echo "    addtimestamps <CREATORS>     => add (append) timestamps in the metadata JSON file of the last download"
  echo "    rmdescription <DESCRIPTION>  => remove a description in the metadata JSON file of the last download"
  echo "    rmsummary <SUMMARY>          => remove a summary in the metadata JSON file of the last download"
  echo "    rmcategories <CATEGORIES>    => remove categories in the metadata JSON file of the last download"
  echo "    rmtopics <TOPICS>            => remove topics in the metadata JSON file of the last download"
  echo "    rmspeakers <SPEAKERS>        => remove speakers in the metadata JSON file of the last download"
  echo "    rmcreators <CREATORS>        => remove creators in the metadata JSON file of the last download"
  echo "    rmtimestamps <CREATORS>      => remove timestamps in the metadata JSON file of the last download"
  echo "    setdescription <DESCRIPTION> [<PARTIAL_FILENAME>] => set a description in the metadata file that matches the partial filename"
  echo "    rmdescription <DESCRIPTION> [<PARTIAL_FILENAME>]  => remove a description in the metadata file that matches the partial filename"
  echo "                                                note  => the two previous examples including [<PARTIAL_FILENAME>]"
  echo "                                                         expose the mechanism applicable to all other 'set' and 'rm' metadata methods"
}

extract_summary_vars() {
  [ "$(has_entries)" = false ] && function=dlv || function=dlc
  title="$(jq .title <<<"$json")"
  url="$(jq .webpage_url <<<"$json")"
  channel_name="$(channel_name_from_obj "$json")"
  channel_url="$(channel_url_from_obj "$json")"
  true # if channel_url fails, exit code is still 0, so && won't fail
}

metadata() {
  search_text="$1"
  if [ -z "$search_text" ]; then # use json from latest download
    [ -n "$json" ] && jq . <<<"$json" && extract_summary_vars && print_summary && return
    [ -f "$json_file" ] && json="$(jq . "$json_file")" && jq . <<<"$json" && extract_summary_vars && print_summary && return
    [ -f "$meta_file" ] && json="$(jq . "$meta_file")" && jq . <<<"$json" && extract_summary_vars && print_summary && return
    echo "Usage: metadata <SEARCH_TEXT>"
    echo "       metadata <METADATA_JSON_FILE>"
    echo "       metadata <MEDIA_FILE>"
    echo "       metadata"
    echo "       => shows metadata from the last download"
    return
  fi
  # json file arg
  [ -f "$search_text" ] && [[ "$search_text" == *.json ]] &&
    json="$(jq . "$search_text")" && jq . <<<"$json" && extract_summary_vars && print_summary && return
  # media file arg
  [ -f "$(media_file2metadata_path "$search_text")" ] && json="$(jq . "$(media_file2metadata_path "$search_text")")" &&
    jq . <<<"$json" && extract_summary_vars && print_summary && return
  # find json file based search text arg
  ## search in video metadata
  result="$(find_one_vmeta "$(echo "$search_text" | tr ' ' '*')")"
  error=$?
  [ "$error" = 0 ] &&
    json="$(jq . "$result")" && jq . <<<"$json" &&
    extract_summary_vars && print_summary
  [ ! "$error" = 0 ] && print_msg_for_error_code "$error"
  ## search in audio metadata
  result="$(find_one_ameta "$(echo "$search_text" | tr ' ' '*')")"
  error=$?
  [ "$error" = 0 ] &&
    json="$(jq . "$result")" && jq . <<<"$json" &&
    extract_summary_vars && print_summary
  [ ! "$error" = 0 ] && print_msg_for_error_code "$error"
}

filesize-channel-meta-files() {
  find "$channels_meta_dir" -type f -iname "*metadata.json" -exec du -hs {} \;
}

set_metadata_field_json_obj() {
  key="$1" && value="$2"
  json=$(jq --arg 'value' "$value" '."'"$key"'" = $value' <<<"$json")
}

# Sets JSON field with 'key' to 'value' and writes to $meta_file if available.
# Usage: command "key" "value" ---------------------> uses "$json"
#        command "key" "value" "partial_filename" --> seeks metadata file, stores path, in $metadata and loads it "$json"
set_metadata_field() {
  [ "$#" = 0 ] || [ "$#" = 1 ] && echo "Usage: set_metadata_field <KEY> <VALUE> [<PARTIAL_FILENAME>]" && return
  [ "$#" = 2 ] && key="$1" && value="$2" && metadata="$json" # Two arguments (key & value), implies to use $json as metadata.
  [ "$#" = 3 ] && key="$1" && value="$2" && partial_filename="$3" && # three arguments implies we need to find a metadata FILE.
    meta_file="$(find_one_vmeta "$(echo "$partial_filename" | tr ' ' '*')")" &&
    result_find_one_vmeta="$?" &&
    metadata=$(jq . "$meta_file")
  [ "$result_find_one_vmeta" = 1 ] && echo "found no metadata for '$partial_filename'" && return
  [ "$result_find_one_vmeta" = 2 ] && echo "found more than 1 file, specify '$partial_filename' further" && return 1

  [ -z "$metadata" ] && echo "no metadata to work with" && return 1
  json=$(jq --arg 'value' "$value" '."'"$key"'" = $value' <<<"$metadata")

  [ -f "$meta_file" ] && jq . <<<"$json" >"$meta_file" && return
  echo "no metadata file to write to" && return 1
}

setdescription() {
  [ "$#" = 0 ] && echo -e "Usage: setdescription <VALUE> [<PARTIAL_FILENAME>]" && return
  set_metadata_field 'vh_description' "$@" || return
  echo "'vh_description' was set to '$1' $([ -f "$meta_file" ] && echo -e "in metadata file:\n $meta_file")"
}

setsummary() {
  [ "$#" = 0 ] && echo -e "Usage: setsummary <VALUE> [<PARTIAL_FILENAME>]" && return
  set_metadata_field 'vh_summary' "$@" || return
  echo "'vh_summary' was set to '$1' $([ -f "$meta_file" ] && echo -e "in metadata file:\n $meta_file")"
}

setremarks() {
  [ "$#" = 0 ] && echo -e "Usage: setremarks <VALUE> [<PARTIAL_FILENAME>]" && return
  set_metadata_field 'vh_remarks' "$@" || return
  echo "'vh_remarks' was set to '$1' $([ -f "$meta_file" ] && echo -e "in metadata file:\n $meta_file")"
}

setcategories() {
  [ "$#" = 0 ] && echo -e "Usage: setcategories <VALUE> [<PARTIAL_FILENAME>]" && return
  set_metadata_field 'vh_categories' "$@" || return
  echo "'vh_categories' was set to '$1' $([ -f "$meta_file" ] && echo -e "in metadata file:\n $meta_file")"
}

settopics() {
  [ "$#" = 0 ] && echo -e "Usage: settopics <VALUE> [<PARTIAL_FILENAME>]" && return
  set_metadata_field 'vh_topics' "$@" || return
  echo "'vh_topics' was set to '$1' $([ -f "$meta_file" ] && echo -e "in metadata file:\n $meta_file")"
}

setspeakers() {
  [ "$#" = 0 ] && echo -e "Usage: setspeakers <VALUE> [<PARTIAL_FILENAME>]" && return
  set_metadata_field 'vh_speakers' "$@" || return
  echo "'vh_speakers' was set to '$1' $([ -f "$meta_file" ] && echo -e "in metadata file:\n $meta_file")"
}

setcreators() {
  [ "$#" = 0 ] && echo -e "Usage: setcreators <VALUE> [<PARTIAL_FILENAME>]" && return
  set_metadata_field 'vh_creators' "$@" || return
  echo "'vh_creators' was set to '$1' $([ -f "$meta_file" ] && echo -e "in metadata file:\n $meta_file")"
}

setcreators() {
  [ "$#" = 0 ] && echo -e "Usage: setcreators <VALUE> [<PARTIAL_FILENAME>]" && return
  set_metadata_field 'vh_creators' "$@" || return
  echo "'vh_creators' was set to '$1' $([ -f "$meta_file" ] && echo -e "in metadata file:\n $meta_file")"
}

settimestamps() {
  [ "$#" = 0 ] && echo -e "Usage: settimestamps <VALUE> [<PARTIAL_FILENAME>]" && return
  set_metadata_field "vh_timestamps" "$@" || return
  echo "'vh_timestamps' was set to '$1' $([ -f "$meta_file" ] && echo -e "in metadata file:\n $meta_file")"
}

addtimestamps() {
  [ -z "$1" ] && echo -e "Usage: addtimestamps <TIMESTAMP> [<PARTIAL_FILENAME>]" &&
    echo "Example: addtimestamps \"01:11:01 = talking about interesting topic X, 01:23:45 = well that escalated quickly\"" && return
  [ -n "$json" ] && metadata="$json"
  [ -z "$metadata" ] && [ -n "$2" ] && json_file=$(find_one_vmeta "$2") && metadata=$(jq . "$json_file")
  [ -z "$metadata" ] && echo "no metadata to work with" && return 1

  timestamps=$(jq '.vh_timestamps' <<<"$metadata" | tr -d '"')
  [ "$timestamps" = null ] && settimestamps "$1" && return
  timestamps="${timestamps}, ${1}" # append new timestamps to old ones

  if [ -n "$2" ]; then
    set_metadata_field "vh_timestamps" "$timestamps" "$2"
  else
    set_metadata_field "vh_timestamps" "$timestamps"
  fi
  echo "'vh_timestamps' was set to '$timestamps' $([ -f "$meta_file" ] && echo -e "in metadata file:\n $meta_file")"
}

set_downloaded() {
  [ "$#" -eq 2 ] && value="$2" || value="$1"
  set_metadata_field_json_obj "vh_downloaded" "$value"
  [ "$1" = "-f" ] || [ "$1" = "--file" ] && jq <<<"$json" >"$meta_file"
}

set_downloaded_date() {
  set_metadata_field_json_obj "vh_downloaded_date" "$(date +%s)"
}

set_thumb_file() {
  set_metadata_field "vh_thumb_file" "$1" || return
  echo "'vh_thumb_file' was set to '$1' $([ -f "$meta_file" ] && echo -e "in metadata file:\n $meta_file")"
}

rm_metadata_field_json_obj() {
  key="$1"
  [ -z "$key" ] || [ -z "$json" ] && echo "could not remove metadata for key '$key'" && return
  json=$(jq 'del(."'"$key"'")' <<<"$json")
}

rm_metadata_field() {
  [ "$#" = 0 ] && echo "no metadata field given to remove" && return
  [ "$#" = 1 ] && key="$1" && metadata="$json" # meta_file should be set if $json is set
  [ "$#" = 2 ] && key="$1" && partial_filename="$2" &&
    meta_file="$(find_one_vmeta "$partial_filename")" &&
    result_find_one_vmeta="$?" &&
    metadata=$(jq . "$meta_file")
  [ "$result_find_one_vmeta" = 1 ] && echo "found no metadata for '$partial_filename'" && return 1
  [ "$result_find_one_vmeta" = 2 ] && echo "found more than 1 file, specify '$partial_filename' further" && return 1

  [ -z "$metadata" ] && echo "no metadata to work with" && return 1
  json=$(jq 'del(."'"$key"'")' <<<"$metadata")

  [ -f "$meta_file" ] && jq . <<<"$json" >"$meta_file" && return
  echo "no metadata file to write to"
}

rmdescription() {
  rm_metadata_field 'vh_description' "$@" || return
  echo "'vh_description' was removed $([ -f "$meta_file" ] && echo -e "from metadata file:\n$meta_file")"
}

rmsummary() {
  rm_metadata_field 'vh_summary' "$@" || return
  echo "'vh_summary' was removed $([ -f "$meta_file" ] && echo -e "from metadata file:\n$meta_file")"
}

rmcategories() {
  rm_metadata_field 'vh_categories' "$@" || return
  echo "'vh_categories' was removed $([ -f "$meta_file" ] && echo -e "from metadata file:\n$meta_file")"
}

rmremarks() {
  rm_metadata_field 'vh_remarks' "$@" || return
  echo "'vh_remarks' was removed $([ -f "$meta_file" ] && echo -e "from metadata file:\n$meta_file")"
}

rmtopics() {
  rm_metadata_field 'vh_topics' "$@" || return
  echo "'vh_topics' was removed $([ -f "$meta_file" ] && echo -e "from metadata file:\n$meta_file")"
}

rmspeakers() {
  rm_metadata_field 'vh_speakers' "$@" || return
  echo "'vh_speakers' was removed $([ -f "$meta_file" ] && echo -e "from metadata file:\n$meta_file")"
}

rmcreators() {
  rm_metadata_field 'vh_creators' "$@" || return
  echo "'vh_creators' was removed $([ -f "$meta_file" ] && echo -e "from metadata file:\n$meta_file")"
}

rmtimestamps() {
  rm_metadata_field 'vh_timestamps' "$@" || return
  echo "'vh_timestamps' was removed $([ -f "$meta_file" ] && echo -e "from metadata file:\n$meta_file")"
}

rmdownloaded() {
  rm_metadata_field 'vh_downloaded' || return
  echo "'vh_downloaded' was removed $([ -f "$meta_file" ] && echo -e "from metadata file:\n$meta_file")"
}

rmdownloaded_date() {
  rm_metadata_field 'vh_downloaded_date' || return
  echo "'vh_downloaded_date' was removed $([ -f "$meta_file" ] && echo -e "from metadata file:\n$meta_file")"
}

rm_media_file() {
  rm_metadata_field 'vh_media_file' || return
  echo "'vh_downloaded' was removed $([ -f "$meta_file" ] && echo -e "from metadata file:\n$meta_file")"
}

rm_meta_file() {
  rm_metadata_field 'vh_meta_file' || return
  echo "'vh_meta_file' was removed $([ -f "$meta_file" ] && echo -e "from metadata file:\n$meta_file")"
}

rm_thumb_file() {
  rm_metadata_field 'vh_thumb_file' || return
  echo "'vh_thumb_file' was removed $([ -f "$meta_file" ] && echo -e "from metadata file:\n$meta_file")"
}
